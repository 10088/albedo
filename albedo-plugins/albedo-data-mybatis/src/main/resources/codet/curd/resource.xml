<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>resource</name>
	<filePath>src/main/java/${packageName}/${moduleName}/web/${subModuleName}</filePath>
	<fileName>${ClassName}Resource.java</fileName>
	<content><![CDATA[
/**
 * Copyright &copy; 2020 <a href="https://github.com/somowhere/albedo">albedo</a> All rights reserved.
 */
package ${packageName}.${moduleName}.web<#if subModuleName != "">.${subModuleName}</#if>;

import com.albedo.java.common.core.constant.CommonConstants;
import com.albedo.java.common.core.exception.RuntimeMsgException;
import com.albedo.java.common.core.vo.PageModel;
import com.albedo.java.common.core.vo.TreeQuery;
import com.albedo.java.common.core.util.StringUtil;
import com.albedo.java.common.log.annotation.Log;
import com.albedo.java.common.log.enums.BusinessType;
import com.albedo.java.common.web.resource.BaseResource;
import com.albedo.java.common.core.util.R;
import com.albedo.java.common.log.annotation.Log;
import ${packageName}.${moduleName}.domain.dto<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Dto;
import ${packageName}.${moduleName}.domain.dto<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}QueryCriteria;
import ${packageName}.${moduleName}.service<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Service;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.google.common.collect.Lists;
import org.springframework.http.MediaType;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import lombok.AllArgsConstructor;

import javax.validation.Valid;

/**
 * ${functionName}Controller ${functionNameSimple}
 * @author ${functionAuthor}
 * @version ${functionVersion}
 */
@RestController
@RequestMapping(value = "${r"${application.admin-path}"}/${urlPrefix}")
@AllArgsConstructor
public class ${ClassName}Resource extends BaseResource {

	private final ${ClassName}Service service;

	/**
	 * @param id
	 * @return
	 */
	@GetMapping(CommonConstants.URL_ID_REGEX)
	@PreAuthorize("@pms.hasPermission('${permissionPrefix}_view')")
	public R get(@PathVariable String id) {
		log.debug("REST request to get Entity : {}", id);
		return  R.buildOkData(service.getOneVo(id));
	}
	/**
	 * GET / : get all ${className}.
	 *
	 * @param pm the pagination information
	 * @return the R with status 200 (OK) and with body all ${className}
	 */

	@PreAuthorize("@pms.hasPermission('${permissionPrefix}_view')")
	@GetMapping
	public R getPage(PageModel pm, ${ClassName}QueryCriteria ${className}QueryCriteria) {
		QueryWrapper wrapper = QueryWrapperUtil.getWrapper(pm, ${className}QueryCriteria);
		return R.buildOkData(service.findPage(pm, wrapper));
	}

	/**
	 * POST / : Save a ${className}Vo.
	 *
	 * @param ${className}Vo the HTTP ${className}
	 */
	@PreAuthorize("@pms.hasPermission('${permissionPrefix}_edit')")
	@Log(value = "${functionName}", businessType = BusinessType.EDIT)
	@PostMapping(value = "/", produces = MediaType.APPLICATION_JSON_VALUE)
	public R save(@Valid @RequestBody ${ClassName}Dto ${className}Vo) {
		log.debug("REST request to save ${ClassName}Form : {}", ${className}Vo);
		service.save(${className}Vo);
		return R.buildOk("保存${functionNameSimple}成功");

	}

	/**
	 * DELETE //:ids : delete the "ids" ${ClassName}.
	 *
	 * @param ids the id of the ${className} to delete
	 * @return the R with status 200 (OK)
	 */
	@PreAuthorize("@pms.hasPermission('${permissionPrefix}_del')")
	@Log(value = "${functionName}", businessType = BusinessType.DELETE)
	@DeleteMapping
	public R delete(@RequestBody Set<String> ids) {
		log.debug("REST request to delete ${ClassName}: {}", ids);
		service.removeByIds(ids);
		return R.buildOk("删除${functionNameSimple}成功");
	}
}]]>
	</content>
</template>
