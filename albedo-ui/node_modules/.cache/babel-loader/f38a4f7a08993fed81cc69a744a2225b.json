{"remainingRequest":"D:\\IdeaProjects\\albedo\\albedo-ui\\node_modules\\babel-loader\\lib\\index.js!D:\\IdeaProjects\\albedo\\albedo-ui\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\IdeaProjects\\albedo\\albedo-ui\\src\\views\\quartz\\job\\job-service.js","dependencies":[{"path":"D:\\IdeaProjects\\albedo\\albedo-ui\\src\\views\\quartz\\job\\job-service.js","mtime":1566100629090},{"path":"D:\\IdeaProjects\\albedo\\albedo-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IdeaProjects\\albedo\\albedo-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\IdeaProjects\\albedo\\albedo-ui\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import request from '@/router/axios';\nimport validate from \"@/util/validate\";\nvar beforeCronValue = {};\nvar jobService = {\n  page: function page(query) {\n    return request({\n      url: '/quartz/job/',\n      method: 'get',\n      params: query\n    });\n  },\n  save: function save(obj) {\n    return request({\n      url: '/quartz/job/',\n      method: 'post',\n      data: obj\n    });\n  },\n  find: function find(id) {\n    return request({\n      url: '/quartz/job/' + id,\n      method: 'get'\n    });\n  },\n  remove: function remove(id) {\n    return request({\n      url: '/quartz/job/' + id,\n      method: 'delete'\n    });\n  },\n  run: function run(id) {\n    return request({\n      url: '/quartz/job/run/' + id,\n      method: 'post'\n    });\n  },\n  concurrent: function concurrent(id) {\n    return request({\n      url: '/quartz/job/concurrent/' + id,\n      method: 'post'\n    });\n  },\n  available: function available(id) {\n    return request({\n      url: '/quartz/job/available/' + id,\n      method: 'post'\n    });\n  },\n  validateUnique: function validateUnique(rule, value, callback, id) {\n    validate.isUnique(rule, value, callback, '/quartz/job/checkByProperty?id=' + util.objToStr(id));\n  },\n  validateCronExpression: function validateCronExpression(rule, value, callback) {\n    var _this = this;\n\n    if (this.checkNotNull(value) && value != beforeCronValue[rule.field]) {\n      var url = '/quartz/job/check-cron-expression' + rule.field + '=' + value;\n      request({\n        url: url,\n        method: 'get'\n      }).then(function (rs) {\n        beforeCronValue[rule.field] = value;\n\n        if (!rs) {\n          callback(new Error(_this.checkNotNull(rule.message) ? rule.message : \"cron表达式不合法\"));\n        } else {\n          callback();\n        }\n      });\n    } else {\n      callback();\n    }\n  }\n};\nexport default jobService;",{"version":3,"sources":["D:\\IdeaProjects\\albedo\\albedo-ui\\src\\views\\quartz\\job\\job-service.js"],"names":["request","validate","beforeCronValue","jobService","page","query","url","method","params","save","obj","data","find","id","remove","run","concurrent","available","validateUnique","rule","value","callback","isUnique","util","objToStr","validateCronExpression","checkNotNull","field","then","rs","Error","message"],"mappings":"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","sourcesContent":["import request from '@/router/axios';\r\nimport validate from \"@/util/validate\";\r\n\r\nlet beforeCronValue = {};\r\nconst jobService = {\r\n  page(query) {\r\n    return request({\r\n      url: '/quartz/job/',\r\n      method: 'get',\r\n      params: query\r\n    })\r\n  },\r\n\r\n  save(obj) {\r\n    return request({\r\n      url: '/quartz/job/',\r\n      method: 'post',\r\n      data: obj\r\n    })\r\n  },\r\n\r\n  find(id) {\r\n    return request({\r\n      url: '/quartz/job/' + id,\r\n      method: 'get'\r\n    })\r\n  },\r\n\r\n  remove(id) {\r\n    return request({\r\n      url: '/quartz/job/' + id,\r\n      method: 'delete'\r\n    })\r\n  },\r\n\r\n  run(id) {\r\n    return request({\r\n      url: '/quartz/job/run/' + id,\r\n      method: 'post'\r\n    })\r\n  },\r\n\r\n  concurrent(id) {\r\n    return request({\r\n      url: '/quartz/job/concurrent/' + id,\r\n      method: 'post'\r\n    })\r\n  },\r\n\r\n  available(id) {\r\n    return request({\r\n      url: '/quartz/job/available/' + id,\r\n      method: 'post'\r\n    })\r\n  },\r\n\r\n\r\n  validateUnique(rule, value, callback, id) {\r\n    validate.isUnique(rule, value, callback, '/quartz/job/checkByProperty?id=' + util.objToStr(id))\r\n  },\r\n  validateCronExpression(rule, value, callback) {\r\n    if (this.checkNotNull(value) && value != beforeCronValue[rule.field]) {\r\n      let url = '/quartz/job/check-cron-expression' + rule.field + '=' + value;\r\n      request({\r\n        url: url,\r\n        method: 'get'\r\n      }).then(rs => {\r\n        beforeCronValue[rule.field] = value;\r\n        if (!rs) {\r\n          callback(new Error(this.checkNotNull(rule.message) ? rule.message : \"cron表达式不合法\"))\r\n        } else {\r\n          callback()\r\n        }\r\n      });\r\n    } else {\r\n      callback()\r\n    }\r\n  }\r\n};\r\n\r\nexport default jobService\r\n"]}]}