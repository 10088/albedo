{"remainingRequest":"D:\\IdeaProjects\\albedo\\albedo-ui\\node_modules\\babel-loader\\lib\\index.js!D:\\IdeaProjects\\albedo\\albedo-ui\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\IdeaProjects\\albedo\\albedo-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\IdeaProjects\\albedo\\albedo-ui\\src\\views\\quartz\\job\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\IdeaProjects\\albedo\\albedo-ui\\src\\views\\quartz\\job\\index.vue","mtime":1566121468448},{"path":"D:\\IdeaProjects\\albedo\\albedo-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IdeaProjects\\albedo\\albedo-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\IdeaProjects\\albedo\\albedo-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IdeaProjects\\albedo\\albedo-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.function.name\";\nimport _defineProperty from \"D:\\\\IdeaProjects\\\\albedo\\\\albedo-ui\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport jobService from \"./job-service\";\nimport { mapGetters } from \"vuex\";\nimport util from \"@/util/util\";\nimport CrudSelect from \"@/components/avue/crud-select\";\nimport CrudCheckbox from \"@/components/avue/crud-checkbox\";\nimport CrudRadio from \"@/components/avue/crud-radio\";\nimport validate from \"../../../util/validate\";\nimport jobLogService from \"./job-log-service\";\nimport { baseUrl } from \"../../../config/env\";\nexport default {\n  name: \"table_quartz_job\",\n  components: {\n    CrudSelect: CrudSelect,\n    CrudCheckbox: CrudCheckbox,\n    CrudRadio: CrudRadio\n  },\n  data: function data() {\n    var _this = this;\n\n    return {\n      searchFilterVisible: true,\n      dialogFormVisible: false,\n      dialogJobLogVisible: false,\n      list: null,\n      total: null,\n      listLoading: true,\n      searchJobForm: {},\n      listQuery: {\n        page: 1,\n        size: 20\n      },\n      form: {\n        name: undefined,\n        group: undefined,\n        invokeTarget: undefined,\n        cronExpression: undefined,\n        misfirePolicy: undefined,\n        concurrent: undefined,\n        available: undefined,\n        description: undefined\n      },\n      sortList: [],\n      validateCronExpression: function validateCronExpression(rule, value, callback) {\n        jobService.validateCronExpression(rule, value, callback, _this.form.id);\n      },\n      misfirePolicyOptions: undefined,\n      concurrentOptions: undefined,\n      availableOptions: undefined,\n      dialogStatus: 'create',\n      textMap: {\n        update: '编辑任务调度',\n        create: '创建任务调度'\n      },\n      tableKey: 0,\n      searchJobLogFilterVisible: false,\n      listJobLog: null,\n      totalJobLog: null,\n      listJobLogLoading: true,\n      searchJobLogForm: {},\n      listJobLogQuery: {\n        page: 1,\n        size: 10\n      },\n      tableKeyJobLog: 1\n    };\n  },\n  computed: _objectSpread({}, mapGetters([\"permissions\", \"dicts\"])),\n  filters: {},\n  created: function created() {\n    this.getList();\n    this.quartz_job_run = this.permissions[\"quartz_job_run\"];\n    this.quartz_job_edit = this.permissions[\"quartz_job_edit\"];\n    this.quartz_job_log_view = this.permissions[\"quartz_job_log_view\"];\n    this.quartz_job_del = this.permissions[\"quartz_job_del\"];\n    this.quartz_jobLog_export = this.permissions[\"quartz_jobLog_export\"];\n    this.quartz_jobLog_clean = this.permissions[\"quartz_jobLog_clean\"];\n    this.quartz_jobLog_del = this.permissions[\"quartz_jobLog_del\"];\n    this.statusOptions = this.dicts[\"sys_status\"];\n    this.jobGroupOptions = this.dicts[\"sys_job_group\"];\n    this.misfirePolicyOptions = this.dicts[\"sys_misfire_policy\"];\n    this.concurrentOptions = this.dicts[\"sys_flag\"];\n    this.availableOptions = this.dicts[\"sys_flag\"];\n  },\n  methods: {\n    getList: function getList() {\n      var _this2 = this;\n\n      this.listLoading = true;\n      this.listQuery.quedoConditionJson = util.parseJsonItemForm([{\n        fieldName: 'name',\n        value: this.searchJobForm.name,\n        operate: 'like',\n        attrType: 'String'\n      }, {\n        fieldName: 'group',\n        value: this.searchJobForm.group,\n        operate: 'like',\n        attrType: 'String'\n      }]);\n      jobService.page(this.listQuery).then(function (response) {\n        _this2.list = response.data.records;\n        _this2.total = response.data.total;\n        _this2.listLoading = false;\n      });\n    },\n    sortChange: function sortChange(column) {\n      if (column.order == \"ascending\") {\n        this.listQuery.ascs = column.prop;\n        this.listQuery.descs = undefined;\n      } else {\n        this.listQuery.descs = column.prop;\n        this.listQuery.ascs = undefined;\n      }\n\n      this.getList();\n    },\n    searchReset: function searchReset() {\n      this.$refs['searchJobForm'].resetFields();\n    },\n    handleFilter: function handleFilter() {\n      this.listQuery.page = 1;\n      this.getList();\n    },\n    handleSizeChange: function handleSizeChange(val) {\n      this.listQuery.size = val;\n      this.getList();\n    },\n    handleCurrentChange: function handleCurrentChange(val) {\n      this.listQuery.page = val;\n      this.getList();\n    },\n    handleEdit: function handleEdit(row) {\n      var _this3 = this;\n\n      this.resetForm();\n      this.dialogStatus = row && !validate.checkNull(row.id) ? \"update\" : \"create\";\n\n      if (this.dialogStatus == \"create\") {\n        this.dialogFormVisible = true;\n      } else {\n        jobService.find(row.id).then(function (response) {\n          _this3.form = response.data;\n          _this3.form.misfirePolicy = util.objToStr(_this3.form.misfirePolicy);\n          _this3.form.concurrent = util.objToStr(_this3.form.concurrent);\n          _this3.form.available = util.objToStr(_this3.form.available);\n          _this3.form.delFlag = util.objToStr(_this3.form.delFlag);\n          _this3.dialogFormVisible = true;\n        });\n      }\n    },\n    handleJobLog: function handleJobLog(row) {\n      this.dialogJobLogVisible = true;\n      this.getListJobLog();\n    },\n    availableChange: function availableChange(available, id) {\n      var _this4 = this;\n\n      this.$confirm(\"您确定要执行此操作吗?\", \"提示\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        jobService.available(id).then(function (data) {\n          _this4.getList();\n        });\n      });\n    },\n    concurrentChange: function concurrentChange(concurrent, id) {\n      var _this5 = this;\n\n      this.$confirm(\"您确定要执行此操作吗?\", \"提示\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        jobService.concurrent(id).then(function (data) {\n          _this5.getList();\n        });\n      });\n    },\n    cancel: function cancel() {\n      this.dialogFormVisible = false;\n      this.$refs['form'].resetFields();\n    },\n    save: function save() {\n      var _this6 = this;\n\n      var set = this.$refs;\n      set['form'].validate(function (valid) {\n        if (valid) {\n          jobService.save(_this6.form).then(function (data) {\n            _this6.getList();\n\n            _this6.cancel();\n          });\n        } else {\n          return false;\n        }\n      });\n    },\n    handleRun: function handleRun(row) {\n      var _this7 = this;\n\n      this.$confirm(\"此操作将永久删除该任务调度, 是否继续?\", \"提示\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        jobService.run(row.id).then(function (data) {\n          _this7.getList();\n        });\n      });\n    },\n    handleDelete: function handleDelete(row) {\n      var _this8 = this;\n\n      this.$confirm(\"此操作将永久删除该任务调度, 是否继续?\", \"提示\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        jobService.remove(row.id).then(function (data) {\n          _this8.getList();\n        });\n      });\n    },\n    resetForm: function resetForm() {\n      this.form = {\n        name: \"\",\n        group: \"\",\n        invokeTarget: \"\",\n        cronExpression: \"\",\n        misfirePolicy: \"\",\n        concurrent: \"\",\n        available: \"\",\n        description: \"\"\n      };\n      this.$refs['form'] && this.$refs['form'].resetFields();\n    },\n    getListJobLog: function getListJobLog() {\n      var _this9 = this;\n\n      this.listJobLogLoading = true;\n      this.listJobLogQuery.queryConditionJson = util.parseJsonItemForm([{\n        fieldName: 'jobName',\n        value: this.searchJobLogForm.jobName,\n        operate: 'like',\n        attrType: 'String'\n      }, {\n        fieldName: 'jobGroup',\n        value: this.searchJobLogForm.jobGroup,\n        operate: 'like',\n        attrType: 'String'\n      }, {\n        fieldName: 'status',\n        value: this.searchJobLogForm.status,\n        operate: 'eq',\n        attrType: 'String'\n      }]);\n      jobLogService.page(this.listJobLogQuery).then(function (response) {\n        _this9.listJobLog = response.data.records;\n        _this9.totalJobLog = response.data.total;\n        _this9.listJobLogLoading = false;\n      });\n    },\n    sortChangeJobLog: function sortChangeJobLog(column) {\n      if (column.order == \"ascending\") {\n        this.listJobLogQuery.ascs = column.prop;\n        this.listJobLogQuery.descs = undefined;\n      } else {\n        this.listJobLogQuery.descs = column.prop;\n        this.listJobLogQuery.ascs = undefined;\n      }\n\n      this.getListJobLog();\n    },\n    searchResetJobLog: function searchResetJobLog() {\n      this.$refs['searchJobLogForm'].resetFields();\n    },\n    handleJobLogFilter: function handleJobLogFilter() {\n      this.listJobLogQuery.page = 1;\n      this.getListJobLog();\n    },\n    handleJobLogSizeChange: function handleJobLogSizeChange(val) {\n      this.listJobLogQuery.size = val;\n      this.getListJobLog();\n    },\n    handleJobLogCurrentChange: function handleJobLogCurrentChange(val) {\n      this.listJobLogQuery.page = val;\n      this.getListJobLog();\n    },\n    handleJobLogDelete: function handleJobLogDelete(row) {\n      var _this10 = this;\n\n      this.$confirm(\"此操作将永久删除该任务调度日志, 是否继续?\", \"提示\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        jobLogService.remove(row.id).then(function (data) {\n          _this10.getListJobLog();\n        });\n      });\n    },\n    handleJobLogClean: function handleJobLogClean(row) {\n      var _this11 = this;\n\n      this.$confirm('确定要此操作吗?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(function () {\n        jobLogService.clean(row.id).then(function (rs) {\n          _this11.getListJobLog();\n        });\n      });\n    },\n    handleJobLogExport: function handleJobLogExport() {\n      jobLogService.export(this.listJobLogQuery).then(function (response) {\n        window.location.href = \"\".concat(window.location.origin) + baseUrl + \"/file/download?fileName=\" + encodeURI(response.data) + \"&delete=\" + true;\n      });\n    }\n  }\n};",{"version":3,"sources":["index.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"app-container calendar-list-container\">\n    <basic-container>\n      <div class=\"filter-container\">\n        <el-form :inline=\"true\" :model=\"searchJobForm\" ref=\"searchJobForm\" v-show=\"searchFilterVisible\">\n          <el-form-item label=\"任务名称\" prop=\"name\">\n            <el-input class=\"filter-item input-normal\" v-model=\"searchJobForm.name\"></el-input>\n          </el-form-item>\n          <el-form-item label=\"任务组名\" prop=\"group\">\n            <el-input class=\"filter-item input-normal\" v-model=\"searchJobForm.group\"></el-input>\n          </el-form-item>\n          <el-form-item>\n            <el-button @click=\"handleFilter\" icon=\"el-icon-search\" size=\"small\" type=\"primado\">查询</el-button>\n            <el-button @click=\"searchReset\" icon=\"icon-rest\" size=\"small\">重置</el-button>\n          </el-form-item>\n        </el-form>\n      </div>\n\n      <!-- 表格功能列 -->\n      <div class=\"table-menu\">\n        <div class=\"table-menu-left\">\n          <el-button-group>\n            <el-button @click=\"handleEdit\" class=\"filter-item\" icon=\"edit\" size=\"mini\" type=\"primado\"\n                       v-if=\"quartz_job_edit\">添加\n            </el-button>\n            <el-button @click=\"handleJobLog\" class=\"filter-item\" icon=\"edit\" size=\"mini\" type=\"primado\"\n                       v-if=\"quartz_job_log_view\">执行日志\n            </el-button>\n          </el-button-group>\n        </div>\n        <div class=\"table-menu-right\">\n          <el-button @click=\"searchFilterVisible= !searchFilterVisible\" circle icon=\"el-icon-search\"\n                     size=\"mini\"></el-button>\n        </div>\n      </div>\n      <el-table :data=\"list\" :key='tableKey' @sort-change=\"sortChange\" element-loading-text=\"加载中...\"\n                fit highlight-current-row v-loading=\"listLoading\">\n        <el-table-column align=\"center\" label=\"任务名称\">\n          <template slot-scope=\"scope\">\n            <span>{{scope.row.name}}</span>\n          </template>\n        </el-table-column>\n        <el-table-column align=\"center\" label=\"任务组名\">\n          <template slot-scope=\"scope\">\n            <span>{{scope.row.group}}</span>\n          </template>\n        </el-table-column>\n        <el-table-column align=\"center\" label=\"调用目标\">\n          <template slot-scope=\"scope\">\n            <span>{{scope.row.invokeTarget}}</span>\n          </template>\n        </el-table-column>\n        <el-table-column align=\"center\" label=\"cron表达式\">\n          <template slot-scope=\"scope\">\n            <span>{{scope.row.cronExpression}}</span>\n          </template>\n        </el-table-column>\n        <el-table-column align=\"center\" label=\"执行失败策略\" width=\"120\">\n          <template slot-scope=\"scope\">\n            <el-tag>{{scope.row.misfirePolicyText}}</el-tag>\n          </template>\n        </el-table-column>\n        <el-table-column align=\"center\" label=\"是否并发执行\" width=\"120\">\n          <template slot-scope=\"scope\">\n            <el-switch\n              @change=\"concurrentChange(scope.row.available, scope.row.id)\"\n              active-value=\"1\" inactive-value=\"0\" v-model=\"scope.row.concurrent\">\n            </el-switch>\n          </template>\n        </el-table-column>\n        <el-table-column align=\"center\" label=\"是否启用\" width=\"120\">\n          <template slot-scope=\"scope\">\n            <el-switch\n              @change=\"availableChange(scope.row.available, scope.row.id)\"\n              active-value=\"1\" inactive-value=\"0\" v-model=\"scope.row.available\">\n            </el-switch>\n          </template>\n        </el-table-column>\n        <el-table-column align=\"center\" fixed=\"right\" label=\"操作\" v-if=\"quartz_job_edit || quartz_job_del\">\n          <template slot-scope=\"scope\">\n            <el-button @click=\"handleRun(scope.row)\" icon=\"icon-edit\" title=\"执行\" type=\"text\" v-if=\"quartz_job_run\">\n              执行\n            </el-button>\n            <el-button @click=\"handleEdit(scope.row)\" icon=\"icon-edit\" title=\"编辑\" type=\"text\" v-if=\"quartz_job_edit\">\n              编辑\n            </el-button>\n            <el-button @click=\"handleDelete(scope.row)\" icon=\"icon-delete\" title=\"删除\" type=\"text\" v-if=\"quartz_job_del\">\n              删除\n            </el-button>\n          </template>\n        </el-table-column>\n\n      </el-table>\n\n      <div class=\"pagination-container\" v-show=\"!listLoading\">\n        <el-pagination :current-page.sync=\"listQuery.page\" :page-size=\"listQuery.size\"\n                       :page-sizes=\"[10,20,30, 50]\" :total=\"total\" @current-change=\"handleCurrentChange\"\n                       @size-change=\"handleSizeChange\" layout=\"total, sizes, prev, pager, next, jumper\">\n        </el-pagination>\n      </div>\n      <el-dialog :title=\"textMap[dialogStatus]\" :visible.sync=\"dialogFormVisible\">\n        <el-form :model=\"form\" label-width=\"100px\" ref=\"form\">\n          <el-form-item :rules=\"[{required: true,message: '请输入任务名称'},{min: 0,max: 64,message: '长度在 0 到 64 个字符'},]\"\n                        label=\"任务名称\"\n                        prop=\"name\">\n            <el-input v-model=\"form.name\"></el-input>\n\n          </el-form-item>\n          <el-form-item :rules=\"[{required: true,message: '请输入任务组名'}]\" label=\"任务组名\" prop=\"group\">\n            <CrudSelect :dic=\"jobGroupOptions\" v-model=\"form.group\"></CrudSelect>\n          </el-form-item>\n          <el-form-item :rules=\"[{required: true,message: '请输入调用目标'},{min: 0,max: 500,message: '长度在 0 到 500 个字符'},]\"\n                        label=\"调用目标\"\n                        prop=\"invokeTarget\">\n            <el-input v-model=\"form.invokeTarget\"></el-input>\n            <div>\n              <el-tag size=\"mini\" type=\"info\">Bean调用示例：simpleTask.doParams('albedo')</el-tag>\n              <el-tag size=\"mini\" type=\"info\">\n                Class类调用示例：com.albedo.java.modules.quartz.task.SimpleTask.doParams('albedo')\n                参数说明：支持字符串，布尔类型，长整型，浮点型，整型\n              </el-tag>\n              <el-tag size=\"mini\" type=\"info\">参数说明：支持字符串，布尔类型，长整型，浮点型，整型</el-tag>\n            </div>\n          </el-form-item>\n          <el-form-item :rules=\"[{validator: validateCronExpression}]\" label=\"cron表达式\" prop=\"cronExpression\">\n            <el-input v-model=\"form.cronExpression\"></el-input>\n\n          </el-form-item>\n          <el-form-item :rules=\"[{required: true},]\" label=\"执行失败策略\" prop=\"misfirePolicy\">\n            <CrudSelect :dic=\"misfirePolicyOptions\" v-model=\"form.misfirePolicy\"></CrudSelect>\n            <div>\n              <el-tag size=\"mini\" type=\"info\">计划执行错误策略</el-tag>\n            </div>\n          </el-form-item>\n          <el-form-item :rules=\"[{required: true},]\" label=\"是否并发执行\" prop=\"concurrent\">\n            <CrudRadio :dic=\"concurrentOptions\" v-model=\"form.concurrent\"></CrudRadio>\n\n          </el-form-item>\n          <el-form-item :rules=\"[{required: true},]\" label=\"是否启用\" prop=\"available\">\n            <CrudRadio :dic=\"availableOptions\" v-model=\"form.available\"></CrudRadio>\n          </el-form-item>\n          <el-form-item :rules=\"[{min: 0,max: 255,message: '长度在 0 到 255 个字符'},]\" label=\"备注\" prop=\"description\">\n            <el-input type=\"textarea\" v-model=\"form.description\"></el-input>\n\n          </el-form-item>\n        </el-form>\n        <div class=\"dialog-footer\" slot=\"footer\">\n          <el-button @click=\"cancel()\">取 消</el-button>\n          <el-button @click=\"save()\" type=\"primado\">保 存</el-button>\n        </div>\n      </el-dialog>\n\n      <el-dialog title=\"任务调度日志\" width=\"90%\" :visible.sync=\"dialogJobLogVisible\">\n        <div class=\"app-container calendar-listJobLog-container\">\n          <basic-container>\n            <div class=\"filter-container\">\n              <el-form :inline=\"true\" :model=\"searchJobLogForm\" ref=\"searchJobLogForm\" v-show=\"searchJobLogFilterVisible\">\n                <el-form-item label=\"任务名称\" prop=\"jobName\">\n                  <el-input class=\"filter-item input-normal\" v-model=\"searchJobLogForm.jobName\"></el-input>\n                </el-form-item>\n                <el-form-item label=\"任务组名\" prop=\"jobGroup\">\n                  <el-input class=\"filter-item input-normal\" v-model=\"searchJobLogForm.jobGroup\"></el-input>\n                </el-form-item>\n                <el-form-item label=\"执行状态\" prop=\"status\">\n                  <CrudRadio :dic=\"statusOptions\" v-model=\"searchJobLogForm.status\"></CrudRadio>\n                </el-form-item>\n                <el-form-item>\n                  <el-button @click=\"handleJobLogFilter\" icon=\"el-icon-search\" size=\"small\" type=\"primary\">查询</el-button>\n                  <el-button @click=\"searchResetJobLog\" icon=\"icon-rest\" size=\"small\">重置</el-button>\n                </el-form-item>\n              </el-form>\n            </div>\n            <!-- 表格功能列 -->\n            <div class=\"table-menu\">\n              <div class=\"table-menu-left\">\n                <el-button-group>\n                  <el-button @click=\"handleJobLogClean\" icon=\"icon-export\" size=\"mini\" type=\"primary\"\n                             v-if=\"quartz_jobLog_clean\">清空\n                  </el-button>\n                  <el-button @click=\"handleJobLogExport\" icon=\"icon-export\" size=\"mini\" type=\"primary\"\n                             v-if=\"quartz_jobLog_export\">导出\n                  </el-button>\n                </el-button-group>\n              </div>\n              <div class=\"table-menu-right\">\n                <el-button @click=\"searchJobLogFilterVisible= !searchJobLogFilterVisible\" circle icon=\"el-icon-search\"\n                           size=\"mini\"></el-button>\n              </div>\n            </div>\n            <el-table :data=\"listJobLog\" :key='tableKeyJobLog' @sort-change=\"sortChangeJobLog\" element-loading-text=\"加载中...\"\n                      fit highlight-current-row v-loading=\"listJobLogLoading\">\n              <el-table-column align=\"center\" label=\"任务名称\">\n                <template slot-scope=\"scope\">\n                  <span>{{scope.row.jobName}}</span>\n                </template>\n              </el-table-column>\n              <el-table-column align=\"center\" label=\"任务组名\">\n                <template slot-scope=\"scope\">\n                  <span>{{scope.row.jobGroup}}</span>\n                </template>\n              </el-table-column>\n              <el-table-column align=\"center\" label=\"调用目标字符串\">\n                <template slot-scope=\"scope\">\n                  <span>{{scope.row.invokeTarget}}</span>\n                </template>\n              </el-table-column>\n              <el-table-column align=\"center\" label=\"执行状态\">\n                <template slot-scope=\"scope\">\n                  <el-tag>{{scope.row.statusText}}</el-tag>\n                </template>\n              </el-table-column>\n              <el-table-column align=\"center\" label=\"开始时间\">\n                <template slot-scope=\"scope\">\n                  <span>{{scope.row.startTime}}</span>\n                </template>\n              </el-table-column>\n              <el-table-column align=\"center\" label=\"结束时间\">\n                <template slot-scope=\"scope\">\n                  <span>{{scope.row.endTime}}</span>\n                </template>\n              </el-table-column>\n              <el-table-column align=\"center\" label=\"创建时间\">\n                <template slot-scope=\"scope\">\n                  <span>{{scope.row.createTime}}</span>\n                </template>\n              </el-table-column>\n              <el-table-column align=\"center\" label=\"日志信息\">\n                <template slot-scope=\"scope\">\n                  <span>{{scope.row.jobMessage}}</span>\n                </template>\n              </el-table-column>\n              <el-table-column align=\"center\" label=\"异常信息\">\n                <template slot-scope=\"scope\">\n                  <span>{{scope.row.exceptionInfo}}</span>\n                </template>\n              </el-table-column>\n              <el-table-column align=\"center\" fixed=\"right\" label=\"操作\" v-if=\"quartz_jobLog_del\">\n                <template slot-scope=\"scope\">\n                  <el-button @click=\"handleJobLogDelete(scope.row)\" icon=\"icon-delete\" title=\"删除\" type=\"text\"\n                             v-if=\"quartz_jobLog_del\">\n                  </el-button>\n                </template>\n              </el-table-column>\n\n            </el-table>\n            <div class=\"pagination-container\" v-show=\"!listJobLogLoading\">\n              <el-pagination :current-page.sync=\"listJobLogQuery.current\" :page-size=\"listJobLogQuery.size\"\n                             :page-sizes=\"[10,20,30, 50]\"\n                             :total=\"totalJobLog\" @current-change=\"handleJobLogCurrentChange\"\n                             @size-change=\"handleJobLogSizeChange\" background\n                             class=\"pull-right\" layout=\"total, sizes, prev, pager, next, jumper\">\n              </el-pagination>\n            </div>\n          </basic-container>\n        </div>\n      </el-dialog>\n    </basic-container>\n  </div>\n</template>\n\n<script>\n    import jobService from \"./job-service\";\n    import {mapGetters} from \"vuex\";\n    import util from \"@/util/util\";\n    import CrudSelect from \"@/components/avue/crud-select\";\n    import CrudCheckbox from \"@/components/avue/crud-checkbox\";\n    import CrudRadio from \"@/components/avue/crud-radio\";\n    import validate from \"../../../util/validate\";\n    import jobLogService from \"./job-log-service\";\n    import {baseUrl} from \"../../../config/env\";\n\n    export default {\n        name: \"table_quartz_job\",\n        components: {CrudSelect, CrudCheckbox, CrudRadio},\n        data() {\n            return {\n                searchFilterVisible: true,\n                dialogFormVisible: false,\n                dialogJobLogVisible: false,\n                list: null,\n                total: null,\n                listLoading: true,\n                searchJobForm: {},\n                listQuery: {\n                    page: 1,\n                    size: 20\n                },\n                form: {\n                    name: undefined,\n                    group: undefined,\n                    invokeTarget: undefined,\n                    cronExpression: undefined,\n                    misfirePolicy: undefined,\n                    concurrent: undefined,\n                    available: undefined,\n                    description: undefined,\n                },\n                sortList: [],\n                validateCronExpression: (rule, value, callback) => {\n                    jobService.validateCronExpression(rule, value, callback, this.form.id)\n                },\n                misfirePolicyOptions: undefined,\n                concurrentOptions: undefined,\n                availableOptions: undefined,\n                dialogStatus: 'create',\n                textMap: {\n                    update: '编辑任务调度',\n                    create: '创建任务调度'\n                },\n                tableKey: 0,\n                searchJobLogFilterVisible: false,\n                listJobLog: null,\n                totalJobLog: null,\n                listJobLogLoading: true,\n                searchJobLogForm: {},\n                listJobLogQuery: {\n                    page: 1,\n                    size: 10\n                },\n                tableKeyJobLog: 1\n            };\n        },\n        computed: {\n            ...mapGetters([\"permissions\", \"dicts\"])\n        },\n        filters: {},\n        created() {\n            this.getList();\n            this.quartz_job_run = this.permissions[\"quartz_job_run\"];\n            this.quartz_job_edit = this.permissions[\"quartz_job_edit\"];\n            this.quartz_job_log_view = this.permissions[\"quartz_job_log_view\"];\n            this.quartz_job_del = this.permissions[\"quartz_job_del\"];\n            this.quartz_jobLog_export = this.permissions[\"quartz_jobLog_export\"];\n            this.quartz_jobLog_clean = this.permissions[\"quartz_jobLog_clean\"];\n            this.quartz_jobLog_del = this.permissions[\"quartz_jobLog_del\"];\n            this.statusOptions = this.dicts[\"sys_status\"];\n            this.jobGroupOptions = this.dicts[\"sys_job_group\"];\n            this.misfirePolicyOptions = this.dicts[\"sys_misfire_policy\"];\n            this.concurrentOptions = this.dicts[\"sys_flag\"];\n            this.availableOptions = this.dicts[\"sys_flag\"];\n        },\n        methods: {\n            getList() {\n                this.listLoading = true;\n                this.listQuery.quedoConditionJson = util.parseJsonItemForm([\n                    {fieldName: 'name', value: this.searchJobForm.name, operate: 'like', attrType: 'String'},\n                    {fieldName: 'group', value: this.searchJobForm.group, operate: 'like', attrType: 'String'},\n                ]);\n                jobService.page(this.listQuery).then(response => {\n                    this.list = response.data.records;\n                    this.total = response.data.total;\n                    this.listLoading = false;\n                });\n            },\n            sortChange(column) {\n                if (column.order == \"ascending\") {\n                    this.listQuery.ascs = column.prop;\n                    this.listQuery.descs = undefined;\n                } else {\n                    this.listQuery.descs = column.prop;\n                    this.listQuery.ascs = undefined;\n                }\n                this.getList()\n            },\n            searchReset() {\n                this.$refs['searchJobForm'].resetFields();\n            },\n            handleFilter() {\n                this.listQuery.page = 1;\n                this.getList();\n            },\n            handleSizeChange(val) {\n                this.listQuery.size = val;\n                this.getList();\n            },\n            handleCurrentChange(val) {\n                this.listQuery.page = val;\n                this.getList();\n            },\n            handleEdit(row) {\n                this.resetForm();\n                this.dialogStatus = row && !validate.checkNull(row.id) ? \"update\" : \"create\";\n                if (this.dialogStatus == \"create\") {\n                    this.dialogFormVisible = true;\n                } else {\n                    jobService.find(row.id).then(response => {\n                        this.form = response.data;\n                        this.form.misfirePolicy = util.objToStr(this.form.misfirePolicy);\n                        this.form.concurrent = util.objToStr(this.form.concurrent);\n                        this.form.available = util.objToStr(this.form.available);\n                        this.form.delFlag = util.objToStr(this.form.delFlag);\n                        this.dialogFormVisible = true;\n                    });\n                }\n            },\n            handleJobLog(row) {\n                this.dialogJobLogVisible = true;\n                this.getListJobLog();\n            },\n            availableChange(available, id) {\n                this.$confirm(\n                    \"您确定要执行此操作吗?\",\n                    \"提示\",\n                    {\n                        confirmButtonText: \"确定\",\n                        cancelButtonText: \"取消\",\n                        type: \"warning\"\n                    }\n                ).then(() => {\n                    jobService.available(id).then((data) => {\n                        this.getList();\n                    });\n                });\n            },\n            concurrentChange(concurrent, id) {\n                this.$confirm(\n                    \"您确定要执行此操作吗?\",\n                    \"提示\",\n                    {\n                        confirmButtonText: \"确定\",\n                        cancelButtonText: \"取消\",\n                        type: \"warning\"\n                    }\n                ).then(() => {\n                    jobService.concurrent(id).then((data) => {\n                        this.getList();\n                    });\n                });\n            },\n            cancel() {\n                this.dialogFormVisible = false;\n                this.$refs['form'].resetFields();\n            },\n            save() {\n                const set = this.$refs;\n                set['form'].validate(valid => {\n                    if (valid) {\n                        jobService.save(this.form).then((data) => {\n                            this.getList();\n                            this.cancel()\n                        });\n                    } else {\n                        return false;\n                    }\n                });\n            },\n            handleRun(row) {\n                this.$confirm(\n                    \"此操作将永久删除该任务调度, 是否继续?\",\n                    \"提示\",\n                    {\n                        confirmButtonText: \"确定\",\n                        cancelButtonText: \"取消\",\n                        type: \"warning\"\n                    }\n                ).then(() => {\n                    jobService.run(row.id).then((data) => {\n                        this.getList();\n                    });\n                });\n            },\n            handleDelete(row) {\n                this.$confirm(\n                    \"此操作将永久删除该任务调度, 是否继续?\",\n                    \"提示\",\n                    {\n                        confirmButtonText: \"确定\",\n                        cancelButtonText: \"取消\",\n                        type: \"warning\"\n                    }\n                ).then(() => {\n                    jobService.remove(row.id).then((data) => {\n                        this.getList();\n                    });\n                });\n            },\n            resetForm() {\n                this.form = {\n                    name: \"\",\n                    group: \"\",\n                    invokeTarget: \"\",\n                    cronExpression: \"\",\n                    misfirePolicy: \"\",\n                    concurrent: \"\",\n                    available: \"\",\n                    description: \"\",\n                };\n                this.$refs['form'] && this.$refs['form'].resetFields();\n            },\n            getListJobLog() {\n                this.listJobLogLoading = true;\n                this.listJobLogQuery.queryConditionJson = util.parseJsonItemForm([\n                    {fieldName: 'jobName', value: this.searchJobLogForm.jobName, operate: 'like', attrType: 'String'},\n                    {fieldName: 'jobGroup', value: this.searchJobLogForm.jobGroup, operate: 'like', attrType: 'String'},\n                    {fieldName: 'status', value: this.searchJobLogForm.status, operate: 'eq', attrType: 'String'},\n                ]);\n                jobLogService.page(this.listJobLogQuery).then(response => {\n                    this.listJobLog = response.data.records;\n                    this.totalJobLog = response.data.total;\n                    this.listJobLogLoading = false;\n                });\n            },\n            sortChangeJobLog(column) {\n                if (column.order == \"ascending\") {\n                    this.listJobLogQuery.ascs = column.prop;\n                    this.listJobLogQuery.descs = undefined;\n                } else {\n                    this.listJobLogQuery.descs = column.prop;\n                    this.listJobLogQuery.ascs = undefined;\n                }\n                this.getListJobLog()\n            },\n            searchResetJobLog() {\n                this.$refs['searchJobLogForm'].resetFields();\n            },\n            handleJobLogFilter() {\n                this.listJobLogQuery.page = 1;\n                this.getListJobLog();\n            },\n            handleJobLogSizeChange(val) {\n                this.listJobLogQuery.size = val;\n                this.getListJobLog();\n            },\n            handleJobLogCurrentChange(val) {\n                this.listJobLogQuery.page = val;\n                this.getListJobLog();\n            },\n            handleJobLogDelete(row) {\n                this.$confirm(\n                    \"此操作将永久删除该任务调度日志, 是否继续?\",\n                    \"提示\",\n                    {\n                        confirmButtonText: \"确定\",\n                        cancelButtonText: \"取消\",\n                        type: \"warning\"\n                    }\n                ).then(() => {\n                    jobLogService.remove(row.id).then((data) => {\n                        this.getListJobLog();\n                    });\n                });\n            },\n            handleJobLogClean(row) {\n                this.$confirm('确定要此操作吗?', '提示', {\n                    confirmButtonText: '确定',\n                    cancelButtonText: '取消',\n                    type: 'warning'\n                }).then(() => {\n                    jobLogService.clean(row.id).then((rs) => {\n                        this.getListJobLog();\n                    })\n                })\n            },\n            handleJobLogExport() {\n                jobLogService.export(this.listJobLogQuery).then(response => {\n                    window.location.href = `${window.location.origin}` + baseUrl + \"/file/download?fileName=\" + encodeURI(response.data) + \"&delete=\" + true;\n                });\n            }\n        }\n    };\n</script>\n"],"sourceRoot":"src/views/quartz/job"}]}