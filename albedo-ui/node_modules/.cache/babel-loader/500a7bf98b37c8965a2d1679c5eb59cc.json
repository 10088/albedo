{"remainingRequest":"D:\\IdeaProjects\\albedo\\albedo-ui\\node_modules\\babel-loader\\lib\\index.js!D:\\IdeaProjects\\albedo\\albedo-ui\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\IdeaProjects\\albedo\\albedo-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\IdeaProjects\\albedo\\albedo-ui\\src\\views\\quartz\\job-log\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\IdeaProjects\\albedo\\albedo-ui\\src\\views\\quartz\\job-log\\index.vue","mtime":1566121468335},{"path":"D:\\IdeaProjects\\albedo\\albedo-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IdeaProjects\\albedo\\albedo-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\IdeaProjects\\albedo\\albedo-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IdeaProjects\\albedo\\albedo-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"D:\\\\IdeaProjects\\\\albedo\\\\albedo-ui\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from \"vuex\";\nimport util from \"@/util/util\";\nimport CrudSelect from \"@/components/avue/crud-select\";\nimport CrudCheckbox from \"@/components/avue/crud-checkbox\";\nimport CrudRadio from \"@/components/avue/crud-radio\";\nimport { baseUrl } from \"../../../config/env\";\nimport jobLogService from \"../job/job-log-service\";\nexport default {\n  name: \"table_quartz_jobLog\",\n  components: {\n    CrudSelect: CrudSelect,\n    CrudCheckbox: CrudCheckbox,\n    CrudRadio: CrudRadio\n  },\n  data: function data() {\n    return {\n      searchJobLogFilterVisible: true,\n      listJobLog: null,\n      totalJobLog: null,\n      listJobLogLoading: true,\n      searchJobLogForm: {},\n      listJobLogQuery: {\n        page: 1,\n        size: 20\n      },\n      tableKeyJobLog: 1\n    };\n  },\n  computed: _objectSpread({}, mapGetters([\"permissions\", \"dicts\"])),\n  filters: {},\n  created: function created() {\n    this.getListJobLog();\n    this.quartz_jobLog_export = this.permissions[\"quartz_jobLog_export\"];\n    this.quartz_jobLog_clean = this.permissions[\"quartz_jobLog_clean\"];\n    this.quartz_jobLog_del = this.permissions[\"quartz_jobLog_del\"];\n    this.statusOptions = this.dicts[\"sys_status\"];\n  },\n  methods: {\n    getListJobLog: function getListJobLog() {\n      var _this = this;\n\n      this.listJobLogLoading = true;\n      this.listJobLogQuery.queryConditionJson = util.parseJsonItemForm([{\n        fieldName: 'jobName',\n        value: this.searchJobLogForm.jobName,\n        operate: 'like',\n        attrType: 'String'\n      }, {\n        fieldName: 'jobGroup',\n        value: this.searchJobLogForm.jobGroup,\n        operate: 'like',\n        attrType: 'String'\n      }, {\n        fieldName: 'status',\n        value: this.searchJobLogForm.status,\n        operate: 'eq',\n        attrType: 'String'\n      }]);\n      jobLogService.page(this.listJobLogQuery).then(function (response) {\n        _this.listJobLog = response.data.records;\n        _this.totalJobLog = response.data.total;\n        _this.listJobLogLoading = false;\n      });\n    },\n    sortChangeJobLog: function sortChangeJobLog(column) {\n      if (column.order == \"ascending\") {\n        this.listJobLogQuery.ascs = column.prop;\n        this.listJobLogQuery.descs = undefined;\n      } else {\n        this.listJobLogQuery.descs = column.prop;\n        this.listJobLogQuery.ascs = undefined;\n      }\n\n      this.getListJobLog();\n    },\n    searchResetJobLog: function searchResetJobLog() {\n      this.$refs['searchJobLogForm'].resetFields();\n    },\n    handleJobLogFilter: function handleJobLogFilter() {\n      this.listJobLogQuery.page = 1;\n      this.getListJobLog();\n    },\n    handleJobLogSizeChange: function handleJobLogSizeChange(val) {\n      this.listJobLogQuery.size = val;\n      this.getListJobLog();\n    },\n    handleJobLogCurrentChange: function handleJobLogCurrentChange(val) {\n      this.listJobLogQuery.page = val;\n      this.getListJobLog();\n    },\n    handleJobLogDelete: function handleJobLogDelete(row) {\n      var _this2 = this;\n\n      this.$confirm(\"此操作将永久删除该任务调度日志, 是否继续?\", \"提示\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        jobLogService.remove(row.id).then(function (data) {\n          _this2.getListJobLog();\n        });\n      });\n    },\n    handleJobLogClean: function handleJobLogClean(row) {\n      var _this3 = this;\n\n      this.$confirm('确定要此操作吗?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(function () {\n        jobLogService.clean(row.id).then(function (rs) {\n          _this3.getListJobLog();\n        });\n      });\n    },\n    handleJobLogExport: function handleJobLogExport() {\n      jobLogService.export(this.listJobLogQuery).then(function (response) {\n        window.location.href = \"\".concat(window.location.origin) + baseUrl + \"/file/download?fileName=\" + encodeURI(response.data) + \"&delete=\" + true;\n      });\n    }\n  }\n};",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0GA,SAAA,UAAA,QAAA,MAAA;AACA,OAAA,IAAA,MAAA,aAAA;AACA,OAAA,UAAA,MAAA,+BAAA;AACA,OAAA,YAAA,MAAA,iCAAA;AACA,OAAA,SAAA,MAAA,8BAAA;AACA,SAAA,OAAA;AACA,OAAA,aAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,qBADA;AAEA,EAAA,UAAA,EAAA;AAAA,IAAA,UAAA,EAAA,UAAA;AAAA,IAAA,YAAA,EAAA,YAAA;AAAA,IAAA,SAAA,EAAA;AAAA,GAFA;AAGA,EAAA,IAHA,kBAGA;AACA,WAAA;AACA,MAAA,yBAAA,EAAA,IADA;AAEA,MAAA,UAAA,EAAA,IAFA;AAGA,MAAA,WAAA,EAAA,IAHA;AAIA,MAAA,iBAAA,EAAA,IAJA;AAKA,MAAA,gBAAA,EAAA,EALA;AAMA,MAAA,eAAA,EAAA;AACA,QAAA,IAAA,EAAA,CADA;AAEA,QAAA,IAAA,EAAA;AAFA,OANA;AAUA,MAAA,cAAA,EAAA;AAVA,KAAA;AAYA,GAhBA;AAiBA,EAAA,QAAA,oBACA,UAAA,CAAA,CAAA,aAAA,EAAA,OAAA,CAAA,CADA,CAjBA;AAoBA,EAAA,OAAA,EAAA,EApBA;AAqBA,EAAA,OArBA,qBAqBA;AACA,SAAA,aAAA;AACA,SAAA,oBAAA,GAAA,KAAA,WAAA,CAAA,sBAAA,CAAA;AACA,SAAA,mBAAA,GAAA,KAAA,WAAA,CAAA,qBAAA,CAAA;AACA,SAAA,iBAAA,GAAA,KAAA,WAAA,CAAA,mBAAA,CAAA;AACA,SAAA,aAAA,GAAA,KAAA,KAAA,CAAA,YAAA,CAAA;AACA,GA3BA;AA4BA,EAAA,OAAA,EAAA;AACA,IAAA,aADA,2BACA;AAAA;;AACA,WAAA,iBAAA,GAAA,IAAA;AACA,WAAA,eAAA,CAAA,kBAAA,GAAA,IAAA,CAAA,iBAAA,CAAA,CACA;AAAA,QAAA,SAAA,EAAA,SAAA;AAAA,QAAA,KAAA,EAAA,KAAA,gBAAA,CAAA,OAAA;AAAA,QAAA,OAAA,EAAA,MAAA;AAAA,QAAA,QAAA,EAAA;AAAA,OADA,EAEA;AAAA,QAAA,SAAA,EAAA,UAAA;AAAA,QAAA,KAAA,EAAA,KAAA,gBAAA,CAAA,QAAA;AAAA,QAAA,OAAA,EAAA,MAAA;AAAA,QAAA,QAAA,EAAA;AAAA,OAFA,EAGA;AAAA,QAAA,SAAA,EAAA,QAAA;AAAA,QAAA,KAAA,EAAA,KAAA,gBAAA,CAAA,MAAA;AAAA,QAAA,OAAA,EAAA,IAAA;AAAA,QAAA,QAAA,EAAA;AAAA,OAHA,CAAA,CAAA;AAKA,MAAA,aAAA,CAAA,IAAA,CAAA,KAAA,eAAA,EAAA,IAAA,CAAA,UAAA,QAAA,EAAA;AACA,QAAA,KAAA,CAAA,UAAA,GAAA,QAAA,CAAA,IAAA,CAAA,OAAA;AACA,QAAA,KAAA,CAAA,WAAA,GAAA,QAAA,CAAA,IAAA,CAAA,KAAA;AACA,QAAA,KAAA,CAAA,iBAAA,GAAA,KAAA;AACA,OAJA;AAKA,KAbA;AAcA,IAAA,gBAdA,4BAcA,MAdA,EAcA;AACA,UAAA,MAAA,CAAA,KAAA,IAAA,WAAA,EAAA;AACA,aAAA,eAAA,CAAA,IAAA,GAAA,MAAA,CAAA,IAAA;AACA,aAAA,eAAA,CAAA,KAAA,GAAA,SAAA;AACA,OAHA,MAGA;AACA,aAAA,eAAA,CAAA,KAAA,GAAA,MAAA,CAAA,IAAA;AACA,aAAA,eAAA,CAAA,IAAA,GAAA,SAAA;AACA;;AACA,WAAA,aAAA;AACA,KAvBA;AAwBA,IAAA,iBAxBA,+BAwBA;AACA,WAAA,KAAA,CAAA,kBAAA,EAAA,WAAA;AACA,KA1BA;AA2BA,IAAA,kBA3BA,gCA2BA;AACA,WAAA,eAAA,CAAA,IAAA,GAAA,CAAA;AACA,WAAA,aAAA;AACA,KA9BA;AA+BA,IAAA,sBA/BA,kCA+BA,GA/BA,EA+BA;AACA,WAAA,eAAA,CAAA,IAAA,GAAA,GAAA;AACA,WAAA,aAAA;AACA,KAlCA;AAmCA,IAAA,yBAnCA,qCAmCA,GAnCA,EAmCA;AACA,WAAA,eAAA,CAAA,IAAA,GAAA,GAAA;AACA,WAAA,aAAA;AACA,KAtCA;AAuCA,IAAA,kBAvCA,8BAuCA,GAvCA,EAuCA;AAAA;;AACA,WAAA,QAAA,CACA,wBADA,EAEA,IAFA,EAGA;AACA,QAAA,iBAAA,EAAA,IADA;AAEA,QAAA,gBAAA,EAAA,IAFA;AAGA,QAAA,IAAA,EAAA;AAHA,OAHA,EAQA,IARA,CAQA,YAAA;AACA,QAAA,aAAA,CAAA,MAAA,CAAA,GAAA,CAAA,EAAA,EAAA,IAAA,CAAA,UAAA,IAAA,EAAA;AACA,UAAA,MAAA,CAAA,aAAA;AACA,SAFA;AAGA,OAZA;AAaA,KArDA;AAsDA,IAAA,iBAtDA,6BAsDA,GAtDA,EAsDA;AAAA;;AACA,WAAA,QAAA,CAAA,UAAA,EAAA,IAAA,EAAA;AACA,QAAA,iBAAA,EAAA,IADA;AAEA,QAAA,gBAAA,EAAA,IAFA;AAGA,QAAA,IAAA,EAAA;AAHA,OAAA,EAIA,IAJA,CAIA,YAAA;AACA,QAAA,aAAA,CAAA,KAAA,CAAA,GAAA,CAAA,EAAA,EAAA,IAAA,CAAA,UAAA,EAAA,EAAA;AACA,UAAA,MAAA,CAAA,aAAA;AACA,SAFA;AAGA,OARA;AASA,KAhEA;AAiEA,IAAA,kBAjEA,gCAiEA;AACA,MAAA,aAAA,CAAA,MAAA,CAAA,KAAA,eAAA,EAAA,IAAA,CAAA,UAAA,QAAA,EAAA;AACA,QAAA,MAAA,CAAA,QAAA,CAAA,IAAA,GAAA,UAAA,MAAA,CAAA,QAAA,CAAA,MAAA,IAAA,OAAA,GAAA,0BAAA,GAAA,SAAA,CAAA,QAAA,CAAA,IAAA,CAAA,GAAA,UAAA,GAAA,IAAA;AACA,OAFA;AAGA;AArEA;AA5BA,CAAA","sourcesContent":["<template>\n  <div class=\"app-container calendar-listJobLog-container\">\n    <basic-container>\n      <div class=\"filter-container\">\n        <el-form :inline=\"true\" :model=\"searchJobLogForm\" ref=\"searchJobLogForm\" v-show=\"searchJobLogFilterVisible\">\n          <el-form-item label=\"任务名称\" prop=\"jobName\">\n            <el-input class=\"filter-item input-normal\" v-model=\"searchJobLogForm.jobName\"></el-input>\n          </el-form-item>\n          <el-form-item label=\"任务组名\" prop=\"jobGroup\">\n            <el-input class=\"filter-item input-normal\" v-model=\"searchJobLogForm.jobGroup\"></el-input>\n          </el-form-item>\n          <el-form-item label=\"执行状态\" prop=\"status\">\n            <CrudRadio :dic=\"statusOptions\" v-model=\"searchJobLogForm.status\"></CrudRadio>\n          </el-form-item>\n          <el-form-item>\n            <el-button @click=\"handleJobLogFilter\" icon=\"el-icon-search\" size=\"small\" type=\"primary\">查询</el-button>\n            <el-button @click=\"searchResetJobLog\" icon=\"icon-rest\" size=\"small\">重置</el-button>\n          </el-form-item>\n        </el-form>\n      </div>\n      <!-- 表格功能列 -->\n      <div class=\"table-menu\">\n        <div class=\"table-menu-left\">\n          <el-button-group>\n            <el-button @click=\"handleJobLogClean\" icon=\"icon-export\" size=\"mini\" type=\"primary\"\n                       v-if=\"quartz_jobLog_clean\">清空\n            </el-button>\n            <el-button @click=\"handleJobLogExport\" icon=\"icon-export\" size=\"mini\" type=\"primary\"\n                       v-if=\"quartz_jobLog_export\">导出\n            </el-button>\n          </el-button-group>\n        </div>\n        <div class=\"table-menu-right\">\n          <el-button @click=\"searchJobLogFilterVisible= !searchJobLogFilterVisible\" circle icon=\"el-icon-search\"\n                     size=\"mini\"></el-button>\n        </div>\n      </div>\n      <el-table :data=\"listJobLog\" :key='tableKeyJobLog' @sort-change=\"sortChangeJobLog\" element-loading-text=\"加载中...\"\n                fit highlight-current-row v-loading=\"listJobLogLoading\">\n        <el-table-column align=\"center\" label=\"任务名称\">\n          <template slot-scope=\"scope\">\n            <span>{{scope.row.jobName}}</span>\n          </template>\n        </el-table-column>\n        <el-table-column align=\"center\" label=\"任务组名\">\n          <template slot-scope=\"scope\">\n            <span>{{scope.row.jobGroup}}</span>\n          </template>\n        </el-table-column>\n        <el-table-column align=\"center\" label=\"调用目标字符串\">\n          <template slot-scope=\"scope\">\n            <span>{{scope.row.invokeTarget}}</span>\n          </template>\n        </el-table-column>\n        <el-table-column align=\"center\" label=\"执行状态\">\n          <template slot-scope=\"scope\">\n            <el-tag>{{scope.row.statusText}}</el-tag>\n          </template>\n        </el-table-column>\n        <el-table-column align=\"center\" label=\"开始时间\">\n          <template slot-scope=\"scope\">\n            <span>{{scope.row.startTime}}</span>\n          </template>\n        </el-table-column>\n        <el-table-column align=\"center\" label=\"结束时间\">\n          <template slot-scope=\"scope\">\n            <span>{{scope.row.endTime}}</span>\n          </template>\n        </el-table-column>\n        <el-table-column align=\"center\" label=\"创建时间\">\n          <template slot-scope=\"scope\">\n            <span>{{scope.row.createTime}}</span>\n          </template>\n        </el-table-column>\n        <el-table-column align=\"center\" label=\"日志信息\">\n          <template slot-scope=\"scope\">\n            <span>{{scope.row.jobMessage}}</span>\n          </template>\n        </el-table-column>\n        <el-table-column align=\"center\" label=\"异常信息\">\n          <template slot-scope=\"scope\">\n            <span>{{scope.row.exceptionInfo}}</span>\n          </template>\n        </el-table-column>\n        <el-table-column align=\"center\" fixed=\"right\" label=\"操作\" v-if=\"quartz_jobLog_del\">\n          <template slot-scope=\"scope\">\n            <el-button @click=\"handleJobLogDelete(scope.row)\" icon=\"icon-delete\" title=\"删除\" type=\"text\"\n                       v-if=\"quartz_jobLog_del\">\n            </el-button>\n          </template>\n        </el-table-column>\n\n      </el-table>\n      <div class=\"pagination-container\" v-show=\"!listJobLogLoading\">\n        <el-pagination :current-page.sync=\"listJobLogQuery.current\" :page-size=\"listJobLogQuery.size\"\n                       :page-sizes=\"[10,20,30, 50]\"\n                       :total=\"totalJobLog\" @current-change=\"handleJobLogCurrentChange\"\n                       @size-change=\"handleJobLogSizeChange\" background\n                       class=\"pull-right\" layout=\"total, sizes, prev, pager, next, jumper\">\n        </el-pagination>\n      </div>\n    </basic-container>\n  </div>\n</template>\n\n<script>\n    import {mapGetters} from \"vuex\";\n    import util from \"@/util/util\";\n    import CrudSelect from \"@/components/avue/crud-select\";\n    import CrudCheckbox from \"@/components/avue/crud-checkbox\";\n    import CrudRadio from \"@/components/avue/crud-radio\";\n    import {baseUrl} from \"../../../config/env\";\n    import jobLogService from \"../job/job-log-service\";\n\n    export default {\n        name: \"table_quartz_jobLog\",\n        components: {CrudSelect, CrudCheckbox, CrudRadio},\n        data() {\n            return {\n                searchJobLogFilterVisible: true,\n                listJobLog: null,\n                totalJobLog: null,\n                listJobLogLoading: true,\n                searchJobLogForm: {},\n                listJobLogQuery: {\n                    page: 1,\n                    size: 20\n                },\n                tableKeyJobLog: 1\n            };\n        },\n        computed: {\n            ...mapGetters([\"permissions\", \"dicts\"])\n        },\n        filters: {},\n        created() {\n            this.getListJobLog();\n            this.quartz_jobLog_export = this.permissions[\"quartz_jobLog_export\"];\n            this.quartz_jobLog_clean = this.permissions[\"quartz_jobLog_clean\"];\n            this.quartz_jobLog_del = this.permissions[\"quartz_jobLog_del\"];\n            this.statusOptions = this.dicts[\"sys_status\"];\n        },\n        methods: {\n            getListJobLog() {\n                this.listJobLogLoading = true;\n                this.listJobLogQuery.queryConditionJson = util.parseJsonItemForm([\n                    {fieldName: 'jobName', value: this.searchJobLogForm.jobName, operate: 'like', attrType: 'String'},\n                    {fieldName: 'jobGroup', value: this.searchJobLogForm.jobGroup, operate: 'like', attrType: 'String'},\n                    {fieldName: 'status', value: this.searchJobLogForm.status, operate: 'eq', attrType: 'String'},\n                ]);\n                jobLogService.page(this.listJobLogQuery).then(response => {\n                    this.listJobLog = response.data.records;\n                    this.totalJobLog = response.data.total;\n                    this.listJobLogLoading = false;\n                });\n            },\n            sortChangeJobLog(column) {\n                if (column.order == \"ascending\") {\n                    this.listJobLogQuery.ascs = column.prop;\n                    this.listJobLogQuery.descs = undefined;\n                } else {\n                    this.listJobLogQuery.descs = column.prop;\n                    this.listJobLogQuery.ascs = undefined;\n                }\n                this.getListJobLog()\n            },\n            searchResetJobLog() {\n                this.$refs['searchJobLogForm'].resetFields();\n            },\n            handleJobLogFilter() {\n                this.listJobLogQuery.page = 1;\n                this.getListJobLog();\n            },\n            handleJobLogSizeChange(val) {\n                this.listJobLogQuery.size = val;\n                this.getListJobLog();\n            },\n            handleJobLogCurrentChange(val) {\n                this.listJobLogQuery.page = val;\n                this.getListJobLog();\n            },\n            handleJobLogDelete(row) {\n                this.$confirm(\n                    \"此操作将永久删除该任务调度日志, 是否继续?\",\n                    \"提示\",\n                    {\n                        confirmButtonText: \"确定\",\n                        cancelButtonText: \"取消\",\n                        type: \"warning\"\n                    }\n                ).then(() => {\n                    jobLogService.remove(row.id).then((data) => {\n                        this.getListJobLog();\n                    });\n                });\n            },\n            handleJobLogClean(row) {\n                this.$confirm('确定要此操作吗?', '提示', {\n                    confirmButtonText: '确定',\n                    cancelButtonText: '取消',\n                    type: 'warning'\n                }).then(() => {\n                    jobLogService.clean(row.id).then((rs) => {\n                        this.getListJobLog();\n                    })\n                })\n            },\n            handleJobLogExport() {\n                jobLogService.export(this.listJobLogQuery).then(response => {\n                    window.location.href = `${window.location.origin}` + baseUrl + \"/file/download?fileName=\" + encodeURI(response.data) + \"&delete=\" + true;\n                });\n            }\n        }\n    };\n</script>\n"],"sourceRoot":"src/views/quartz/job-log"}]}