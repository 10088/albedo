{"remainingRequest":"D:\\IdeaProjects\\albedo\\albedo-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\IdeaProjects\\albedo\\albedo-ui\\src\\views\\quartz\\job\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\IdeaProjects\\albedo\\albedo-ui\\src\\views\\quartz\\job\\index.vue","mtime":1566121468448},{"path":"D:\\IdeaProjects\\albedo\\albedo-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IdeaProjects\\albedo\\albedo-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\IdeaProjects\\albedo\\albedo-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\IdeaProjects\\albedo\\albedo-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport jobService from \"./job-service\";\nimport {mapGetters} from \"vuex\";\nimport util from \"@/util/util\";\nimport CrudSelect from \"@/components/avue/crud-select\";\nimport CrudCheckbox from \"@/components/avue/crud-checkbox\";\nimport CrudRadio from \"@/components/avue/crud-radio\";\nimport validate from \"../../../util/validate\";\nimport jobLogService from \"./job-log-service\";\nimport {baseUrl} from \"../../../config/env\";\n\nexport default {\n    name: \"table_quartz_job\",\n    components: {CrudSelect, CrudCheckbox, CrudRadio},\n    data() {\n        return {\n            searchFilterVisible: true,\n            dialogFormVisible: false,\n            dialogJobLogVisible: false,\n            list: null,\n            total: null,\n            listLoading: true,\n            searchJobForm: {},\n            listQuery: {\n                page: 1,\n                size: 20\n            },\n            form: {\n                name: undefined,\n                group: undefined,\n                invokeTarget: undefined,\n                cronExpression: undefined,\n                misfirePolicy: undefined,\n                concurrent: undefined,\n                available: undefined,\n                description: undefined,\n            },\n            sortList: [],\n            validateCronExpression: (rule, value, callback) => {\n                jobService.validateCronExpression(rule, value, callback, this.form.id)\n            },\n            misfirePolicyOptions: undefined,\n            concurrentOptions: undefined,\n            availableOptions: undefined,\n            dialogStatus: 'create',\n            textMap: {\n                update: '编辑任务调度',\n                create: '创建任务调度'\n            },\n            tableKey: 0,\n            searchJobLogFilterVisible: false,\n            listJobLog: null,\n            totalJobLog: null,\n            listJobLogLoading: true,\n            searchJobLogForm: {},\n            listJobLogQuery: {\n                page: 1,\n                size: 10\n            },\n            tableKeyJobLog: 1\n        };\n    },\n    computed: {\n        ...mapGetters([\"permissions\", \"dicts\"])\n    },\n    filters: {},\n    created() {\n        this.getList();\n        this.quartz_job_run = this.permissions[\"quartz_job_run\"];\n        this.quartz_job_edit = this.permissions[\"quartz_job_edit\"];\n        this.quartz_job_log_view = this.permissions[\"quartz_job_log_view\"];\n        this.quartz_job_del = this.permissions[\"quartz_job_del\"];\n        this.quartz_jobLog_export = this.permissions[\"quartz_jobLog_export\"];\n        this.quartz_jobLog_clean = this.permissions[\"quartz_jobLog_clean\"];\n        this.quartz_jobLog_del = this.permissions[\"quartz_jobLog_del\"];\n        this.statusOptions = this.dicts[\"sys_status\"];\n        this.jobGroupOptions = this.dicts[\"sys_job_group\"];\n        this.misfirePolicyOptions = this.dicts[\"sys_misfire_policy\"];\n        this.concurrentOptions = this.dicts[\"sys_flag\"];\n        this.availableOptions = this.dicts[\"sys_flag\"];\n    },\n    methods: {\n        getList() {\n            this.listLoading = true;\n            this.listQuery.quedoConditionJson = util.parseJsonItemForm([\n                {fieldName: 'name', value: this.searchJobForm.name, operate: 'like', attrType: 'String'},\n                {fieldName: 'group', value: this.searchJobForm.group, operate: 'like', attrType: 'String'},\n            ]);\n            jobService.page(this.listQuery).then(response => {\n                this.list = response.data.records;\n                this.total = response.data.total;\n                this.listLoading = false;\n            });\n        },\n        sortChange(column) {\n            if (column.order == \"ascending\") {\n                this.listQuery.ascs = column.prop;\n                this.listQuery.descs = undefined;\n            } else {\n                this.listQuery.descs = column.prop;\n                this.listQuery.ascs = undefined;\n            }\n            this.getList()\n        },\n        searchReset() {\n            this.$refs['searchJobForm'].resetFields();\n        },\n        handleFilter() {\n            this.listQuery.page = 1;\n            this.getList();\n        },\n        handleSizeChange(val) {\n            this.listQuery.size = val;\n            this.getList();\n        },\n        handleCurrentChange(val) {\n            this.listQuery.page = val;\n            this.getList();\n        },\n        handleEdit(row) {\n            this.resetForm();\n            this.dialogStatus = row && !validate.checkNull(row.id) ? \"update\" : \"create\";\n            if (this.dialogStatus == \"create\") {\n                this.dialogFormVisible = true;\n            } else {\n                jobService.find(row.id).then(response => {\n                    this.form = response.data;\n                    this.form.misfirePolicy = util.objToStr(this.form.misfirePolicy);\n                    this.form.concurrent = util.objToStr(this.form.concurrent);\n                    this.form.available = util.objToStr(this.form.available);\n                    this.form.delFlag = util.objToStr(this.form.delFlag);\n                    this.dialogFormVisible = true;\n                });\n            }\n        },\n        handleJobLog(row) {\n            this.dialogJobLogVisible = true;\n            this.getListJobLog();\n        },\n        availableChange(available, id) {\n            this.$confirm(\n                \"您确定要执行此操作吗?\",\n                \"提示\",\n                {\n                    confirmButtonText: \"确定\",\n                    cancelButtonText: \"取消\",\n                    type: \"warning\"\n                }\n            ).then(() => {\n                jobService.available(id).then((data) => {\n                    this.getList();\n                });\n            });\n        },\n        concurrentChange(concurrent, id) {\n            this.$confirm(\n                \"您确定要执行此操作吗?\",\n                \"提示\",\n                {\n                    confirmButtonText: \"确定\",\n                    cancelButtonText: \"取消\",\n                    type: \"warning\"\n                }\n            ).then(() => {\n                jobService.concurrent(id).then((data) => {\n                    this.getList();\n                });\n            });\n        },\n        cancel() {\n            this.dialogFormVisible = false;\n            this.$refs['form'].resetFields();\n        },\n        save() {\n            const set = this.$refs;\n            set['form'].validate(valid => {\n                if (valid) {\n                    jobService.save(this.form).then((data) => {\n                        this.getList();\n                        this.cancel()\n                    });\n                } else {\n                    return false;\n                }\n            });\n        },\n        handleRun(row) {\n            this.$confirm(\n                \"此操作将永久删除该任务调度, 是否继续?\",\n                \"提示\",\n                {\n                    confirmButtonText: \"确定\",\n                    cancelButtonText: \"取消\",\n                    type: \"warning\"\n                }\n            ).then(() => {\n                jobService.run(row.id).then((data) => {\n                    this.getList();\n                });\n            });\n        },\n        handleDelete(row) {\n            this.$confirm(\n                \"此操作将永久删除该任务调度, 是否继续?\",\n                \"提示\",\n                {\n                    confirmButtonText: \"确定\",\n                    cancelButtonText: \"取消\",\n                    type: \"warning\"\n                }\n            ).then(() => {\n                jobService.remove(row.id).then((data) => {\n                    this.getList();\n                });\n            });\n        },\n        resetForm() {\n            this.form = {\n                name: \"\",\n                group: \"\",\n                invokeTarget: \"\",\n                cronExpression: \"\",\n                misfirePolicy: \"\",\n                concurrent: \"\",\n                available: \"\",\n                description: \"\",\n            };\n            this.$refs['form'] && this.$refs['form'].resetFields();\n        },\n        getListJobLog() {\n            this.listJobLogLoading = true;\n            this.listJobLogQuery.queryConditionJson = util.parseJsonItemForm([\n                {fieldName: 'jobName', value: this.searchJobLogForm.jobName, operate: 'like', attrType: 'String'},\n                {fieldName: 'jobGroup', value: this.searchJobLogForm.jobGroup, operate: 'like', attrType: 'String'},\n                {fieldName: 'status', value: this.searchJobLogForm.status, operate: 'eq', attrType: 'String'},\n            ]);\n            jobLogService.page(this.listJobLogQuery).then(response => {\n                this.listJobLog = response.data.records;\n                this.totalJobLog = response.data.total;\n                this.listJobLogLoading = false;\n            });\n        },\n        sortChangeJobLog(column) {\n            if (column.order == \"ascending\") {\n                this.listJobLogQuery.ascs = column.prop;\n                this.listJobLogQuery.descs = undefined;\n            } else {\n                this.listJobLogQuery.descs = column.prop;\n                this.listJobLogQuery.ascs = undefined;\n            }\n            this.getListJobLog()\n        },\n        searchResetJobLog() {\n            this.$refs['searchJobLogForm'].resetFields();\n        },\n        handleJobLogFilter() {\n            this.listJobLogQuery.page = 1;\n            this.getListJobLog();\n        },\n        handleJobLogSizeChange(val) {\n            this.listJobLogQuery.size = val;\n            this.getListJobLog();\n        },\n        handleJobLogCurrentChange(val) {\n            this.listJobLogQuery.page = val;\n            this.getListJobLog();\n        },\n        handleJobLogDelete(row) {\n            this.$confirm(\n                \"此操作将永久删除该任务调度日志, 是否继续?\",\n                \"提示\",\n                {\n                    confirmButtonText: \"确定\",\n                    cancelButtonText: \"取消\",\n                    type: \"warning\"\n                }\n            ).then(() => {\n                jobLogService.remove(row.id).then((data) => {\n                    this.getListJobLog();\n                });\n            });\n        },\n        handleJobLogClean(row) {\n            this.$confirm('确定要此操作吗?', '提示', {\n                confirmButtonText: '确定',\n                cancelButtonText: '取消',\n                type: 'warning'\n            }).then(() => {\n                jobLogService.clean(row.id).then((rs) => {\n                    this.getListJobLog();\n                })\n            })\n        },\n        handleJobLogExport() {\n            jobLogService.export(this.listJobLogQuery).then(response => {\n                window.location.href = `${window.location.origin}` + baseUrl + \"/file/download?fileName=\" + encodeURI(response.data) + \"&delete=\" + true;\n            });\n        }\n    }\n};\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqfile":"index.vue","sourceRoot":"src/views/quartz/job","sourcesContent":["<template>\n  <div class=\"app-container calendar-list-container\">\n    <basic-container>\n      <div class=\"filter-container\">\n        <el-form :inline=\"true\" :model=\"searchJobForm\" ref=\"searchJobForm\" v-show=\"searchFilterVisible\">\n          <el-form-item label=\"任务名称\" prop=\"name\">\n            <el-input class=\"filter-item input-normal\" v-model=\"searchJobForm.name\"></el-input>\n          </el-form-item>\n          <el-form-item label=\"任务组名\" prop=\"group\">\n            <el-input class=\"filter-item input-normal\" v-model=\"searchJobForm.group\"></el-input>\n          </el-form-item>\n          <el-form-item>\n            <el-button @click=\"handleFilter\" icon=\"el-icon-search\" size=\"small\" type=\"primado\">查询</el-button>\n            <el-button @click=\"searchReset\" icon=\"icon-rest\" size=\"small\">重置</el-button>\n          </el-form-item>\n        </el-form>\n      </div>\n\n      <!-- 表格功能列 -->\n      <div class=\"table-menu\">\n        <div class=\"table-menu-left\">\n          <el-button-group>\n            <el-button @click=\"handleEdit\" class=\"filter-item\" icon=\"edit\" size=\"mini\" type=\"primado\"\n                       v-if=\"quartz_job_edit\">添加\n            </el-button>\n            <el-button @click=\"handleJobLog\" class=\"filter-item\" icon=\"edit\" size=\"mini\" type=\"primado\"\n                       v-if=\"quartz_job_log_view\">执行日志\n            </el-button>\n          </el-button-group>\n        </div>\n        <div class=\"table-menu-right\">\n          <el-button @click=\"searchFilterVisible= !searchFilterVisible\" circle icon=\"el-icon-search\"\n                     size=\"mini\"></el-button>\n        </div>\n      </div>\n      <el-table :data=\"list\" :key='tableKey' @sort-change=\"sortChange\" element-loading-text=\"加载中...\"\n                fit highlight-current-row v-loading=\"listLoading\">\n        <el-table-column align=\"center\" label=\"任务名称\">\n          <template slot-scope=\"scope\">\n            <span>{{scope.row.name}}</span>\n          </template>\n        </el-table-column>\n        <el-table-column align=\"center\" label=\"任务组名\">\n          <template slot-scope=\"scope\">\n            <span>{{scope.row.group}}</span>\n          </template>\n        </el-table-column>\n        <el-table-column align=\"center\" label=\"调用目标\">\n          <template slot-scope=\"scope\">\n            <span>{{scope.row.invokeTarget}}</span>\n          </template>\n        </el-table-column>\n        <el-table-column align=\"center\" label=\"cron表达式\">\n          <template slot-scope=\"scope\">\n            <span>{{scope.row.cronExpression}}</span>\n          </template>\n        </el-table-column>\n        <el-table-column align=\"center\" label=\"执行失败策略\" width=\"120\">\n          <template slot-scope=\"scope\">\n            <el-tag>{{scope.row.misfirePolicyText}}</el-tag>\n          </template>\n        </el-table-column>\n        <el-table-column align=\"center\" label=\"是否并发执行\" width=\"120\">\n          <template slot-scope=\"scope\">\n            <el-switch\n              @change=\"concurrentChange(scope.row.available, scope.row.id)\"\n              active-value=\"1\" inactive-value=\"0\" v-model=\"scope.row.concurrent\">\n            </el-switch>\n          </template>\n        </el-table-column>\n        <el-table-column align=\"center\" label=\"是否启用\" width=\"120\">\n          <template slot-scope=\"scope\">\n            <el-switch\n              @change=\"availableChange(scope.row.available, scope.row.id)\"\n              active-value=\"1\" inactive-value=\"0\" v-model=\"scope.row.available\">\n            </el-switch>\n          </template>\n        </el-table-column>\n        <el-table-column align=\"center\" fixed=\"right\" label=\"操作\" v-if=\"quartz_job_edit || quartz_job_del\">\n          <template slot-scope=\"scope\">\n            <el-button @click=\"handleRun(scope.row)\" icon=\"icon-edit\" title=\"执行\" type=\"text\" v-if=\"quartz_job_run\">\n              执行\n            </el-button>\n            <el-button @click=\"handleEdit(scope.row)\" icon=\"icon-edit\" title=\"编辑\" type=\"text\" v-if=\"quartz_job_edit\">\n              编辑\n            </el-button>\n            <el-button @click=\"handleDelete(scope.row)\" icon=\"icon-delete\" title=\"删除\" type=\"text\" v-if=\"quartz_job_del\">\n              删除\n            </el-button>\n          </template>\n        </el-table-column>\n\n      </el-table>\n\n      <div class=\"pagination-container\" v-show=\"!listLoading\">\n        <el-pagination :current-page.sync=\"listQuery.page\" :page-size=\"listQuery.size\"\n                       :page-sizes=\"[10,20,30, 50]\" :total=\"total\" @current-change=\"handleCurrentChange\"\n                       @size-change=\"handleSizeChange\" layout=\"total, sizes, prev, pager, next, jumper\">\n        </el-pagination>\n      </div>\n      <el-dialog :title=\"textMap[dialogStatus]\" :visible.sync=\"dialogFormVisible\">\n        <el-form :model=\"form\" label-width=\"100px\" ref=\"form\">\n          <el-form-item :rules=\"[{required: true,message: '请输入任务名称'},{min: 0,max: 64,message: '长度在 0 到 64 个字符'},]\"\n                        label=\"任务名称\"\n                        prop=\"name\">\n            <el-input v-model=\"form.name\"></el-input>\n\n          </el-form-item>\n          <el-form-item :rules=\"[{required: true,message: '请输入任务组名'}]\" label=\"任务组名\" prop=\"group\">\n            <CrudSelect :dic=\"jobGroupOptions\" v-model=\"form.group\"></CrudSelect>\n          </el-form-item>\n          <el-form-item :rules=\"[{required: true,message: '请输入调用目标'},{min: 0,max: 500,message: '长度在 0 到 500 个字符'},]\"\n                        label=\"调用目标\"\n                        prop=\"invokeTarget\">\n            <el-input v-model=\"form.invokeTarget\"></el-input>\n            <div>\n              <el-tag size=\"mini\" type=\"info\">Bean调用示例：simpleTask.doParams('albedo')</el-tag>\n              <el-tag size=\"mini\" type=\"info\">\n                Class类调用示例：com.albedo.java.modules.quartz.task.SimpleTask.doParams('albedo')\n                参数说明：支持字符串，布尔类型，长整型，浮点型，整型\n              </el-tag>\n              <el-tag size=\"mini\" type=\"info\">参数说明：支持字符串，布尔类型，长整型，浮点型，整型</el-tag>\n            </div>\n          </el-form-item>\n          <el-form-item :rules=\"[{validator: validateCronExpression}]\" label=\"cron表达式\" prop=\"cronExpression\">\n            <el-input v-model=\"form.cronExpression\"></el-input>\n\n          </el-form-item>\n          <el-form-item :rules=\"[{required: true},]\" label=\"执行失败策略\" prop=\"misfirePolicy\">\n            <CrudSelect :dic=\"misfirePolicyOptions\" v-model=\"form.misfirePolicy\"></CrudSelect>\n            <div>\n              <el-tag size=\"mini\" type=\"info\">计划执行错误策略</el-tag>\n            </div>\n          </el-form-item>\n          <el-form-item :rules=\"[{required: true},]\" label=\"是否并发执行\" prop=\"concurrent\">\n            <CrudRadio :dic=\"concurrentOptions\" v-model=\"form.concurrent\"></CrudRadio>\n\n          </el-form-item>\n          <el-form-item :rules=\"[{required: true},]\" label=\"是否启用\" prop=\"available\">\n            <CrudRadio :dic=\"availableOptions\" v-model=\"form.available\"></CrudRadio>\n          </el-form-item>\n          <el-form-item :rules=\"[{min: 0,max: 255,message: '长度在 0 到 255 个字符'},]\" label=\"备注\" prop=\"description\">\n            <el-input type=\"textarea\" v-model=\"form.description\"></el-input>\n\n          </el-form-item>\n        </el-form>\n        <div class=\"dialog-footer\" slot=\"footer\">\n          <el-button @click=\"cancel()\">取 消</el-button>\n          <el-button @click=\"save()\" type=\"primado\">保 存</el-button>\n        </div>\n      </el-dialog>\n\n      <el-dialog title=\"任务调度日志\" width=\"90%\" :visible.sync=\"dialogJobLogVisible\">\n        <div class=\"app-container calendar-listJobLog-container\">\n          <basic-container>\n            <div class=\"filter-container\">\n              <el-form :inline=\"true\" :model=\"searchJobLogForm\" ref=\"searchJobLogForm\" v-show=\"searchJobLogFilterVisible\">\n                <el-form-item label=\"任务名称\" prop=\"jobName\">\n                  <el-input class=\"filter-item input-normal\" v-model=\"searchJobLogForm.jobName\"></el-input>\n                </el-form-item>\n                <el-form-item label=\"任务组名\" prop=\"jobGroup\">\n                  <el-input class=\"filter-item input-normal\" v-model=\"searchJobLogForm.jobGroup\"></el-input>\n                </el-form-item>\n                <el-form-item label=\"执行状态\" prop=\"status\">\n                  <CrudRadio :dic=\"statusOptions\" v-model=\"searchJobLogForm.status\"></CrudRadio>\n                </el-form-item>\n                <el-form-item>\n                  <el-button @click=\"handleJobLogFilter\" icon=\"el-icon-search\" size=\"small\" type=\"primary\">查询</el-button>\n                  <el-button @click=\"searchResetJobLog\" icon=\"icon-rest\" size=\"small\">重置</el-button>\n                </el-form-item>\n              </el-form>\n            </div>\n            <!-- 表格功能列 -->\n            <div class=\"table-menu\">\n              <div class=\"table-menu-left\">\n                <el-button-group>\n                  <el-button @click=\"handleJobLogClean\" icon=\"icon-export\" size=\"mini\" type=\"primary\"\n                             v-if=\"quartz_jobLog_clean\">清空\n                  </el-button>\n                  <el-button @click=\"handleJobLogExport\" icon=\"icon-export\" size=\"mini\" type=\"primary\"\n                             v-if=\"quartz_jobLog_export\">导出\n                  </el-button>\n                </el-button-group>\n              </div>\n              <div class=\"table-menu-right\">\n                <el-button @click=\"searchJobLogFilterVisible= !searchJobLogFilterVisible\" circle icon=\"el-icon-search\"\n                           size=\"mini\"></el-button>\n              </div>\n            </div>\n            <el-table :data=\"listJobLog\" :key='tableKeyJobLog' @sort-change=\"sortChangeJobLog\" element-loading-text=\"加载中...\"\n                      fit highlight-current-row v-loading=\"listJobLogLoading\">\n              <el-table-column align=\"center\" label=\"任务名称\">\n                <template slot-scope=\"scope\">\n                  <span>{{scope.row.jobName}}</span>\n                </template>\n              </el-table-column>\n              <el-table-column align=\"center\" label=\"任务组名\">\n                <template slot-scope=\"scope\">\n                  <span>{{scope.row.jobGroup}}</span>\n                </template>\n              </el-table-column>\n              <el-table-column align=\"center\" label=\"调用目标字符串\">\n                <template slot-scope=\"scope\">\n                  <span>{{scope.row.invokeTarget}}</span>\n                </template>\n              </el-table-column>\n              <el-table-column align=\"center\" label=\"执行状态\">\n                <template slot-scope=\"scope\">\n                  <el-tag>{{scope.row.statusText}}</el-tag>\n                </template>\n              </el-table-column>\n              <el-table-column align=\"center\" label=\"开始时间\">\n                <template slot-scope=\"scope\">\n                  <span>{{scope.row.startTime}}</span>\n                </template>\n              </el-table-column>\n              <el-table-column align=\"center\" label=\"结束时间\">\n                <template slot-scope=\"scope\">\n                  <span>{{scope.row.endTime}}</span>\n                </template>\n              </el-table-column>\n              <el-table-column align=\"center\" label=\"创建时间\">\n                <template slot-scope=\"scope\">\n                  <span>{{scope.row.createTime}}</span>\n                </template>\n              </el-table-column>\n              <el-table-column align=\"center\" label=\"日志信息\">\n                <template slot-scope=\"scope\">\n                  <span>{{scope.row.jobMessage}}</span>\n                </template>\n              </el-table-column>\n              <el-table-column align=\"center\" label=\"异常信息\">\n                <template slot-scope=\"scope\">\n                  <span>{{scope.row.exceptionInfo}}</span>\n                </template>\n              </el-table-column>\n              <el-table-column align=\"center\" fixed=\"right\" label=\"操作\" v-if=\"quartz_jobLog_del\">\n                <template slot-scope=\"scope\">\n                  <el-button @click=\"handleJobLogDelete(scope.row)\" icon=\"icon-delete\" title=\"删除\" type=\"text\"\n                             v-if=\"quartz_jobLog_del\">\n                  </el-button>\n                </template>\n              </el-table-column>\n\n            </el-table>\n            <div class=\"pagination-container\" v-show=\"!listJobLogLoading\">\n              <el-pagination :current-page.sync=\"listJobLogQuery.current\" :page-size=\"listJobLogQuery.size\"\n                             :page-sizes=\"[10,20,30, 50]\"\n                             :total=\"totalJobLog\" @current-change=\"handleJobLogCurrentChange\"\n                             @size-change=\"handleJobLogSizeChange\" background\n                             class=\"pull-right\" layout=\"total, sizes, prev, pager, next, jumper\">\n              </el-pagination>\n            </div>\n          </basic-container>\n        </div>\n      </el-dialog>\n    </basic-container>\n  </div>\n</template>\n\n<script>\n    import jobService from \"./job-service\";\n    import {mapGetters} from \"vuex\";\n    import util from \"@/util/util\";\n    import CrudSelect from \"@/components/avue/crud-select\";\n    import CrudCheckbox from \"@/components/avue/crud-checkbox\";\n    import CrudRadio from \"@/components/avue/crud-radio\";\n    import validate from \"../../../util/validate\";\n    import jobLogService from \"./job-log-service\";\n    import {baseUrl} from \"../../../config/env\";\n\n    export default {\n        name: \"table_quartz_job\",\n        components: {CrudSelect, CrudCheckbox, CrudRadio},\n        data() {\n            return {\n                searchFilterVisible: true,\n                dialogFormVisible: false,\n                dialogJobLogVisible: false,\n                list: null,\n                total: null,\n                listLoading: true,\n                searchJobForm: {},\n                listQuery: {\n                    page: 1,\n                    size: 20\n                },\n                form: {\n                    name: undefined,\n                    group: undefined,\n                    invokeTarget: undefined,\n                    cronExpression: undefined,\n                    misfirePolicy: undefined,\n                    concurrent: undefined,\n                    available: undefined,\n                    description: undefined,\n                },\n                sortList: [],\n                validateCronExpression: (rule, value, callback) => {\n                    jobService.validateCronExpression(rule, value, callback, this.form.id)\n                },\n                misfirePolicyOptions: undefined,\n                concurrentOptions: undefined,\n                availableOptions: undefined,\n                dialogStatus: 'create',\n                textMap: {\n                    update: '编辑任务调度',\n                    create: '创建任务调度'\n                },\n                tableKey: 0,\n                searchJobLogFilterVisible: false,\n                listJobLog: null,\n                totalJobLog: null,\n                listJobLogLoading: true,\n                searchJobLogForm: {},\n                listJobLogQuery: {\n                    page: 1,\n                    size: 10\n                },\n                tableKeyJobLog: 1\n            };\n        },\n        computed: {\n            ...mapGetters([\"permissions\", \"dicts\"])\n        },\n        filters: {},\n        created() {\n            this.getList();\n            this.quartz_job_run = this.permissions[\"quartz_job_run\"];\n            this.quartz_job_edit = this.permissions[\"quartz_job_edit\"];\n            this.quartz_job_log_view = this.permissions[\"quartz_job_log_view\"];\n            this.quartz_job_del = this.permissions[\"quartz_job_del\"];\n            this.quartz_jobLog_export = this.permissions[\"quartz_jobLog_export\"];\n            this.quartz_jobLog_clean = this.permissions[\"quartz_jobLog_clean\"];\n            this.quartz_jobLog_del = this.permissions[\"quartz_jobLog_del\"];\n            this.statusOptions = this.dicts[\"sys_status\"];\n            this.jobGroupOptions = this.dicts[\"sys_job_group\"];\n            this.misfirePolicyOptions = this.dicts[\"sys_misfire_policy\"];\n            this.concurrentOptions = this.dicts[\"sys_flag\"];\n            this.availableOptions = this.dicts[\"sys_flag\"];\n        },\n        methods: {\n            getList() {\n                this.listLoading = true;\n                this.listQuery.quedoConditionJson = util.parseJsonItemForm([\n                    {fieldName: 'name', value: this.searchJobForm.name, operate: 'like', attrType: 'String'},\n                    {fieldName: 'group', value: this.searchJobForm.group, operate: 'like', attrType: 'String'},\n                ]);\n                jobService.page(this.listQuery).then(response => {\n                    this.list = response.data.records;\n                    this.total = response.data.total;\n                    this.listLoading = false;\n                });\n            },\n            sortChange(column) {\n                if (column.order == \"ascending\") {\n                    this.listQuery.ascs = column.prop;\n                    this.listQuery.descs = undefined;\n                } else {\n                    this.listQuery.descs = column.prop;\n                    this.listQuery.ascs = undefined;\n                }\n                this.getList()\n            },\n            searchReset() {\n                this.$refs['searchJobForm'].resetFields();\n            },\n            handleFilter() {\n                this.listQuery.page = 1;\n                this.getList();\n            },\n            handleSizeChange(val) {\n                this.listQuery.size = val;\n                this.getList();\n            },\n            handleCurrentChange(val) {\n                this.listQuery.page = val;\n                this.getList();\n            },\n            handleEdit(row) {\n                this.resetForm();\n                this.dialogStatus = row && !validate.checkNull(row.id) ? \"update\" : \"create\";\n                if (this.dialogStatus == \"create\") {\n                    this.dialogFormVisible = true;\n                } else {\n                    jobService.find(row.id).then(response => {\n                        this.form = response.data;\n                        this.form.misfirePolicy = util.objToStr(this.form.misfirePolicy);\n                        this.form.concurrent = util.objToStr(this.form.concurrent);\n                        this.form.available = util.objToStr(this.form.available);\n                        this.form.delFlag = util.objToStr(this.form.delFlag);\n                        this.dialogFormVisible = true;\n                    });\n                }\n            },\n            handleJobLog(row) {\n                this.dialogJobLogVisible = true;\n                this.getListJobLog();\n            },\n            availableChange(available, id) {\n                this.$confirm(\n                    \"您确定要执行此操作吗?\",\n                    \"提示\",\n                    {\n                        confirmButtonText: \"确定\",\n                        cancelButtonText: \"取消\",\n                        type: \"warning\"\n                    }\n                ).then(() => {\n                    jobService.available(id).then((data) => {\n                        this.getList();\n                    });\n                });\n            },\n            concurrentChange(concurrent, id) {\n                this.$confirm(\n                    \"您确定要执行此操作吗?\",\n                    \"提示\",\n                    {\n                        confirmButtonText: \"确定\",\n                        cancelButtonText: \"取消\",\n                        type: \"warning\"\n                    }\n                ).then(() => {\n                    jobService.concurrent(id).then((data) => {\n                        this.getList();\n                    });\n                });\n            },\n            cancel() {\n                this.dialogFormVisible = false;\n                this.$refs['form'].resetFields();\n            },\n            save() {\n                const set = this.$refs;\n                set['form'].validate(valid => {\n                    if (valid) {\n                        jobService.save(this.form).then((data) => {\n                            this.getList();\n                            this.cancel()\n                        });\n                    } else {\n                        return false;\n                    }\n                });\n            },\n            handleRun(row) {\n                this.$confirm(\n                    \"此操作将永久删除该任务调度, 是否继续?\",\n                    \"提示\",\n                    {\n                        confirmButtonText: \"确定\",\n                        cancelButtonText: \"取消\",\n                        type: \"warning\"\n                    }\n                ).then(() => {\n                    jobService.run(row.id).then((data) => {\n                        this.getList();\n                    });\n                });\n            },\n            handleDelete(row) {\n                this.$confirm(\n                    \"此操作将永久删除该任务调度, 是否继续?\",\n                    \"提示\",\n                    {\n                        confirmButtonText: \"确定\",\n                        cancelButtonText: \"取消\",\n                        type: \"warning\"\n                    }\n                ).then(() => {\n                    jobService.remove(row.id).then((data) => {\n                        this.getList();\n                    });\n                });\n            },\n            resetForm() {\n                this.form = {\n                    name: \"\",\n                    group: \"\",\n                    invokeTarget: \"\",\n                    cronExpression: \"\",\n                    misfirePolicy: \"\",\n                    concurrent: \"\",\n                    available: \"\",\n                    description: \"\",\n                };\n                this.$refs['form'] && this.$refs['form'].resetFields();\n            },\n            getListJobLog() {\n                this.listJobLogLoading = true;\n                this.listJobLogQuery.queryConditionJson = util.parseJsonItemForm([\n                    {fieldName: 'jobName', value: this.searchJobLogForm.jobName, operate: 'like', attrType: 'String'},\n                    {fieldName: 'jobGroup', value: this.searchJobLogForm.jobGroup, operate: 'like', attrType: 'String'},\n                    {fieldName: 'status', value: this.searchJobLogForm.status, operate: 'eq', attrType: 'String'},\n                ]);\n                jobLogService.page(this.listJobLogQuery).then(response => {\n                    this.listJobLog = response.data.records;\n                    this.totalJobLog = response.data.total;\n                    this.listJobLogLoading = false;\n                });\n            },\n            sortChangeJobLog(column) {\n                if (column.order == \"ascending\") {\n                    this.listJobLogQuery.ascs = column.prop;\n                    this.listJobLogQuery.descs = undefined;\n                } else {\n                    this.listJobLogQuery.descs = column.prop;\n                    this.listJobLogQuery.ascs = undefined;\n                }\n                this.getListJobLog()\n            },\n            searchResetJobLog() {\n                this.$refs['searchJobLogForm'].resetFields();\n            },\n            handleJobLogFilter() {\n                this.listJobLogQuery.page = 1;\n                this.getListJobLog();\n            },\n            handleJobLogSizeChange(val) {\n                this.listJobLogQuery.size = val;\n                this.getListJobLog();\n            },\n            handleJobLogCurrentChange(val) {\n                this.listJobLogQuery.page = val;\n                this.getListJobLog();\n            },\n            handleJobLogDelete(row) {\n                this.$confirm(\n                    \"此操作将永久删除该任务调度日志, 是否继续?\",\n                    \"提示\",\n                    {\n                        confirmButtonText: \"确定\",\n                        cancelButtonText: \"取消\",\n                        type: \"warning\"\n                    }\n                ).then(() => {\n                    jobLogService.remove(row.id).then((data) => {\n                        this.getListJobLog();\n                    });\n                });\n            },\n            handleJobLogClean(row) {\n                this.$confirm('确定要此操作吗?', '提示', {\n                    confirmButtonText: '确定',\n                    cancelButtonText: '取消',\n                    type: 'warning'\n                }).then(() => {\n                    jobLogService.clean(row.id).then((rs) => {\n                        this.getListJobLog();\n                    })\n                })\n            },\n            handleJobLogExport() {\n                jobLogService.export(this.listJobLogQuery).then(response => {\n                    window.location.href = `${window.location.origin}` + baseUrl + \"/file/download?fileName=\" + encodeURI(response.data) + \"&delete=\" + true;\n                });\n            }\n        }\n    };\n</script>\n"]}]}