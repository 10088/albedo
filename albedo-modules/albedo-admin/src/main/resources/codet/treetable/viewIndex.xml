<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>viewComponentHtml</name>
	<filePath>src/views/${moduleName}/${subModuleName}/${classNameUrl}</filePath>
	<fileName>index.vue</fileName>
	<content><![CDATA[
<template>
  <div class="app-container">
    <!--工具栏-->
    <div class="head-container">
      <div v-if="crud.props.searchToggle">
        <!-- 搜索 -->
          <#list table.columnList as column>
          <#if column.query>
            <el-form-item label="${column.title}" prop="${column.javaFieldId}">
          <#if column.showType == "input" || column.showType == "textarea">
              <el-input class="filter-item input-normal" v-model="search${ClassName}Form.${column.javaFieldId}"></el-input>
          <#elseif column.showType == "select">
              <crud-select v-model="search${ClassName}Form.${column.javaFieldId}" :dic="${column.javaFieldId}Options"></crud-select>
          <#elseif column.showType == "checkbox">
              <crud-checkbox v-model="search${ClassName}Form.${column.javaFieldId}" :dic="${column.javaFieldId}Options"></crud-checkbox>
          <#elseif column.showType == "radio">
              <crud-radio v-model="search${ClassName}Form.${column.javaFieldId}" :dic="${column.javaFieldId}Options"></crud-radio>
          <#elseif column.showType == "dateselect">
              <el-date-picker v-model="search${ClassName}Form.${column.javaFieldId}" type="datetimerange"
                range-separator="至"
                start-placeholder="开始日期"
                end-placeholder="结束日期">
              </el-date-picker>
          </#if>
            </el-form-item>
          </#if>
          </#list>
            <el-form-item>
              <el-button size="small" type="primary" icon="el-icon-search" @click="handleFilter">查询</el-button>
              <el-button size="small" @click="searchReset" icon="icon-rest">重置</el-button>
            </el-form-item>
          </el-form>
        </div>
      <!-- 表格功能列 -->
      <div class="table-menu">
        <div class="table-menu-left">
          <el-button-group>
            <el-button size="mini" v-if="${permissionPrefix}_edit" class="filter-item" @click="handleEdit" type="primary" icon="edit">添加</el-button>
          </el-button-group>
        </div>
        <div class="table-menu-right">
          <el-button icon="el-icon-search" circle size="mini" @click="searchFilterVisible= !searchFilterVisible"></el-button>
        </div>
      </div>
        <el-table :data="list" @sort-change="sortChange" v-loading="listLoading" element-loading-text="加载中..." border fit highlight-current-row style="width: 99%">
          <el-table-column type="index" fixed="left" width="60"></el-table-column>
          <#list table.columnList as column>
          <#if column.list && column.simpleJavaField!="parentId" && column.simpleJavaField!="parentIds" && column.simpleJavaField!="parent">
          <el-table-column align="center" label="${column.title}">
            <template slot-scope="scope">
            <#if column.dictType?? && column.dictType != "">
			  <el-tag>{{scope.row.${column.simpleJavaField}Text}}</el-tag>
			<#else>
			  <span>{{scope.row.${column.simpleJavaField}}}</span>
			 </#if>
            </template>
          </el-table-column>
          </#if>
          </#list>
          <el-table-column align="center" fixed="right" label="操作" v-if="${permissionPrefix}_edit || ${permissionPrefix}_del">
            <template slot-scope="scope">
            <el-button v-if="${permissionPrefix}_edit" icon="icon-edit" type="primary" title="编辑" size="mini" circle @click="handleEdit(scope.row)">
            </el-button>
            <el-button v-if="${permissionPrefix}_del" icon="icon-delete" type="danger" title="删除" size="mini" circle @click="handleDelete(scope.row)">
            </el-button>
            </template>
          </el-table-column>

        </el-table>
        <div v-show="!listLoading" class="pagination-container">
            <el-pagination @size-change="handleSizeChange" @current-change="handleCurrentChange" :current-page.sync="listQuery.current" :page-sizes="[10,20,30, 50]" :page-size="listQuery.size" layout="total, sizes, prev, pager, next, jumper" :total="total">
            </el-pagination>
          </div>
      </el-col>
    </el-row>
    <el-dialog title="选择${functionNameSimple}" :visible.sync="dialog${ClassName}Visible">
      <el-input placeholder="输入关键字进行过滤"
                v-model="filterParentTree${ClassName}Text">
      </el-input>
      <el-tree class="filter-tree" ref="selectParent${ClassName}Tree" :data="tree${ClassName}SelectData"
               check-strictly node-key="id" highlight-current @node-click="getNodeFormData"
               :filter-node-method="filterNode" default-expand-all>
      </el-tree>
    </el-dialog>
    <el-dialog :title="textMap[dialogStatus]" :visible.sync="dialogFormVisible">
      <el-form :label-position="labelPosition" label-width="80px" :model="form" ref="form">
      <#list table.columnList as column>
        <#if column.simpleJavaField == 'parentId'>
        <el-form-item label="上级${functionNameSimple}" prop="parentName">
          <el-input v-model="form.parentName" placeholder="选择${functionNameSimple}" @focus="handleParent${ClassName}Tree()" :disabled="disableSelect${ClassName}Parent" readonly></el-input>
          <input type="hidden" v-model="form.parentId" />
        </el-form-item>
        <#elseif column.edit && (column.isNotBaseTreeField || column.simpleJavaField == 'name' || column.simpleJavaField == 'sort') && (column.isNotBaseField || column.simpleJavaField == 'description')>
        <el-form-item label="${column.title}" prop="${column.javaFieldId}" :rules="[<#if !column.null>{required: true,message: '请输入${column.title}'},</#if><#if column.javaType == "Long" || column.javaType == "Integer">{validator:validateDigits},</#if><#if column.javaType == "java.math.BigDecimal" || column.javaType == "Double">{ validator:validateNumber},</#if><#if column.dataLength != "0" && column.javaType == "String">{min: 0,max: ${column.dataLength},message: '长度在 0 到 ${column.dataLength} 个字符'},</#if><#if column.unique && !column.pk>{validator:validateUnique}</#if>]">
            <#if column.showType == "input">
                <el-input v-model="form.${column.javaFieldId}"></el-input>
            <#elseif column.showType == "textarea">
                <el-input type="textarea" v-model="form.${column.javaFieldId}"></el-input>
            <#elseif column.showType == "select">
              <crud-select v-model="form.${column.javaFieldId}" :dic="${column.javaFieldId}Options"></crud-select>
            <#elseif column.showType == "checkbox">
              <crud-checkbox v-model="form.${column.javaFieldId}" :dic="${column.javaFieldId}Options"></crud-checkbox>
            <#elseif column.showType == "radio">
              <crud-radio v-model="form.${column.javaFieldId}" :dic="${column.javaFieldId}Options"></crud-radio>
            <#elseif column.showType == "dateselect">
              <el-date-picker v-model="form.${column.javaFieldId}" type="datetime" >
              </el-date-picker>
           </#if>
        <#if column.comments??&& column.comments != ''><div>
		  <el-tag type="info" size="mini">${column.comments}</el-tag>
		</div></#if>
        </el-form-item>
        </#if>
    </#list>
      </el-form>
      <div slot="footer" class="dialog-footer">
        <el-button @click="cancel()">取 消</el-button>
        <el-button type="primary" @click="save()">保 存</el-button>
      </div>
    </el-dialog>
    </basic-container>
  </div>
</template>

<script>
  import { mapGetters } from "vuex";
  import ${className}Service from "./${classNameUrl}-service";
  import validate from "@/util/validate";
  import util from "@/util/util";

  export default {
    name: "table_${permissionPrefix}",
    data() {
      return {
        dialog${ClassName}Visible: false,
        disableSelect${ClassName}Parent: false,
        tree${ClassName}Data: [],
        tree${ClassName}SelectData: [],
        dialogFormVisible: false,
        searchFilterVisible: true,
        list: null,
        total: null,
        listLoading: true,
        search${ClassName}Form: {},
        listQuery: {
          page: 1,
          size: 20
        },
        formEdit: true,
        filterTree${ClassName}Text: '',
        filterParentTree${ClassName}Text: '',
        formStatus: '',
        searchTree: false,
        labelPosition: 'right',
        form: {
          <#list table.columnList as column><#if column.edit && (column.isNotBaseTreeField || column.simpleJavaField == 'name' || column.simpleJavaField == 'sort') && (column.isNotBaseField || column.simpleJavaField == 'description')>
        ${column.javaFieldId}: undefined,
        </#if></#list>
        },
        validateUnique: (rule, value, callback) => {
          validate.isUnique(rule, value, callback, this.form.id)
        },
        validateNumber: (rule, value, callback) => {
          validate.isNumber(rule, value, callback)
        },
        validateDigits: (rule, value, callback) => {
          validate.isDigits(rule, value, callback)
        },
      <#list table.columnList as column><#if column.dictType??&& column.dictType != ''>${column.javaFieldId}Options: undefined,</#if></#list>
        dialogStatus: 'create',
        textMap: {
          update: '编辑${functionNameSimple}',
          create: '创建${functionNameSimple}'
        },
        currentNode: {}
      }
    },
    watch: {
      filterTree${ClassName}Text(val) {
        this.$refs['left${ClassName}Tree'].filter(val);
      },
      filterParentTree${ClassName}Text(val) {
        this.$refs['selectParent${ClassName}Tree'].filter(val);
      }
    },
    created() {
      this.get${ClassName}Tree()
      this.getList()
      this.${permissionPrefix}_edit = this.permissions["${permissionPrefix}_edit"];
      this.${permissionPrefix}_del = this.permissions["${permissionPrefix}_del"];
      <#assign index = 0 /><#list table.columnList as column><#if column.dictType?? && column.dictType != ''>
      this.${column.javaFieldId}Options = this.dicts["${column.dictType}"];
      <#assign index = index+1 />
      </#if></#list>
    },
    computed: {
      ...mapGetters(["permissions","dicts"])
    },
    methods: {
      getList() {
        this.listLoading = true;
        this.listQuery.isAsc = false;
        this.listQuery.queryConditionJson = util.parseJsonItemForm([
        <#list table.columnList as column><#if column.query>
        {fieldName: '${column.javaFieldId}',value:this.search${ClassName}Form.${column.javaFieldId},operate:'${column.queryType}',attrType:'${column.javaType}'},
        </#if></#list>
        {fieldName: 'parentId',value:this.search${ClassName}Form.parentId, attrType:'eq'},
        ])
        ${className}Service.page(this.listQuery).then(response => {
        this.list = response.data.records;
        this.total = response.data.total;
          this.listLoading = false;
        });
      },
      sortChange(column){
        if(column.order=="ascending"){
          this.listQuery.ascs=column.prop
          this.listQuery.descs=undefined;
        }else{
          this.listQuery.descs=column.prop
          this.listQuery.ascs=undefined;
        }
        this.getList()
      },
      get${ClassName}Tree() {
        ${className}Service.fetchTree({all:true}).then(response => {
          this.tree${ClassName}Data = util.parseTreeData(response.data);
        })
      },
      filterNode(value, data) {
        if (!value) return true
        return data.label.indexOf(value) !== -1
      },
      getNodeData(data) {
        this.search${ClassName}Form.parentId = data.id
        this.currentNode = data;
        this.getList()
      },
      getNodeFormData(data){
        this.dialog${ClassName}Visible = false;
        this.form.parentId = data.id;
        this.form.parentName = data.label;
      },
      searchReset() {
        this.$refs['search${ClassName}Form'].resetFields();
        this.search${ClassName}Form.parentId = undefined;
        this.$refs['left${ClassName}Tree'].setCurrentKey(null);
        this.currentNode=undefined;
      },
      handleFilter() {
        this.listQuery.current = 1;
        this.getList();
      },
      handleSizeChange(val) {
        this.listQuery.size = val;
        this.getList();
      },
      handleCurrentChange(val) {
        this.listQuery.current = val;
        this.getList();
      },
      handleEdit(row) {
        this.resetForm();
        this.dialogStatus = row && validate.checkNotNull(row.id)? "update" : "create";
        if(this.dialogStatus == "create"){
          this.dialogFormVisible = true;
          this.form.parentId = this.currentNode.id
          this.form.parentName = this.currentNode.label;
        }else{
          ${className}Service.find(row.id).then(response => {
            this.form = response.data;<#list table.columnList as column><#if column.dictType??&& column.dictType != ''>
            this.form.${column.javaFieldId}=util.objToStr(this.form.${column.javaFieldId});
            </#if></#list>this.disableSelect${ClassName}Parent = this.form.parentName ? false : true;
            this.dialogFormVisible = true;
          });
        }
      },
      handleParent${ClassName}Tree() {
        ${className}Service.fetchTree({extId: this.form.id}).then(response => {
          this.tree${ClassName}SelectData = util.parseTreeData(response.data);
          this.dialog${ClassName}Visible = true;
          setTimeout(()=>{this.$refs['selectParent${ClassName}Tree'].setCurrentKey(this.form.parentId ? this.form.parentId : null);}, 100)
        })
      },
      handleDelete(row) {
        this.$confirm('此操作将永久删除, 是否继续?', '提示', {
          confirmButtonText: '确定',
          cancelButtonText: '取消',
          type: 'warning'
        }).then(() => {
          ${className}Service.remove(row.id).then(() => {
            this.getList();
          })
        })
      },
      save() {
        const set = this.$refs;
        set['form'].validate(valid => {
          if (valid) {
            ${className}Service.save(this.form).then(() => {
              this.getList()
              this.cancel()
            })
          } else {
            return false;
          }
        });
      },
      cancel() {
        this.dialogFormVisible = false;
        this.$refs['form'].resetFields();
      },
      resetForm() {
        this.form = {
          <#list table.columnList as column>
        <#if column.edit && (column.isNotBaseTreeField || column.simpleJavaField == 'name' || column.simpleJavaField == 'sort') && (column.isNotBaseField || column.simpleJavaField == 'description')>
        ${column.javaFieldId}: "",
        </#if>
        </#list>
        }
        if(this.$refs['form']){
          this.$refs['form'].resetFields();
        }
      }
    }
  }
</script>
]]>
	</content>
</template>
